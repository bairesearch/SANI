/*******************************************************************************
 *
 * No License
 * 
 * This work is under exclusive copyright (c) Baxter AI (baxterai.com). 
 * Nobody else can use, copy, distribute, or modify this work without being 
 * at risk of take-downs, shake-downs, or litigation. 
 * 
 * By publishing this source code in a public repository on GitHub, Terms of 
 * Service have been accepted by which Baxter AI have allowed others to view 
 * and fork their repository.
 * 
 * If you find software that doesn't have a license, that generally means you 
 * have no permission from the creators of the software to use, modify, or 
 * share the software. Although a code host such as GitHub may allow you to 
 * view and fork the code, this does not imply that you are permitted to use, 
 * modify, or share the software for any purpose.
 *
 * This notice has been derived from https://choosealicense.com/no-permission 
 * (https://web.archive.org/web/20180312144938/https://choosealicense.com/no-permission)
 *
 *******************************************************************************/

/*******************************************************************************
 *
 * File Name: SANIglobalsDefs.hpp
 * Author: Richard Bruce Baxter - Copyright (c) 2005-2020 Baxter AI (baxterai.com)
 * Project: Sequentially Activated Neuronal Input neural network
 * Project Version: 1n7b 01-November-2020
 * Requirements: requires text parsed by BAI Language Reduction Preprocessor (LRP)
 * Description: SANI specific global definitions
 * /
 *******************************************************************************/

#ifndef HEADER_SANI_GLOBAL_DEFS
#define HEADER_SANI_GLOBAL_DEFS

#include "SHAREDglobalDefs.hpp"


#define SANI_POS_REL_TRANSLATOR_RULES_LAYER_START (1)

#define SANI_PRINT_EXECUTION_TIME	//disable this while performing incremental automated testing

#ifdef USE_SANI
	#define SANI_NODES	//identified SANI1m3b

	#ifdef COMPILE_SANI
		#define SANI_FORWARD	//mandatory
		#define SANI_SEQUENCE_GRAMMAR	//SANI1j2a
		#ifdef SANI_SEQUENCE_GRAMMAR	
			#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS	//SANI1k1a
			//#define SANI_SEMANTIC_NETWORK	//SANI1m1a	//store semantic network within SANI parse tree rather than generating from SANI parse tree
		#endif
	#else
		#define SANI_FORWARD	//optional	//SANI1g1a
	#endif
#endif

//#define SANI_DEBUG_DISABLE_1n_CODE
#ifndef SANI_DEBUG_DISABLE_1n_CODE
	
	#define SANI_DEBUG_RULES_PRINT_SENTENCES
	//#define SANI_DEBUG_SEQUENCE_GRAMMAR_NETWORK_NODES
	//#define SANI_DEBUG_IGNORE_TEST_FAILURE	//SANI1n6a
	//#define SANI_DEBUG_VISUAL_TRACE	//SANI1n6b
	#define SANI_DEBUG_COUNT_GENERATED_NEURONS	//SANI1n6c
	
	//#define SANI_DEBUG_PROPAGATE_TRACE
	#ifdef SANI_DEBUG_PROPAGATE_TRACE
		#define SANI_DEBUG_PROPAGATE
		#define SANI_DEBUG_PROPAGATE_EXTRA4

		//#define SANI_DEBUG_PROPAGATE_EXTRA2
		//#define SANI_DEBUG_PROPAGATE_EXTRA3_PRIMARY
	#endif
				
	#ifdef COMPILE_SANI
		//#define SANI_DEBUG_PROPAGATE_ASSIGN_GROUP_INDICES_TO_INPUT_NEURONS
	#endif
	
	//#ifdef SANI_SEQUENCE_GRAMMAR_STORE_SENTENCE_INDEXING	//not yet defined
		#define SANI_ANN_COLOUR_NODES_FROM_LAST_GENERATED_SENTENCE
		#ifdef SANI_ANN_COLOUR_NODES_FROM_LAST_GENERATED_SENTENCE
			#define SANI_SEQUENCE_GRAMMAR_RECORD_NEWLY_GENERATED_NEURONS
		#endif
	//#endif
	
	#ifdef SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS
		#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_DISALLOW_IDENTICAL_INPUTS	//SANI1n6b
		#ifdef SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_DISALLOW_IDENTICAL_INPUTS
			#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_ALLOW_IDENTICAL_INPUTS_NON_STRING	//SANI1n6b
		#endif
		
		#define SANI_ENFORCE_WORD_CONNECTIVITY_BETWEEN_PREVIOUS_ACTIVE_COMPONENTS_AND_NEWLY_ACTIVATED_COMPONENT_MEMORY	//enforced @SANI1n6a
		
		//#ifdef SANI_SEQUENCE_GRAMMAR_GENERATE_SUBNETS_BASED_ON_POS_UNAMBIGUOUS_SEGMENTS or GIA_POS_REL_TRANSLATOR_RULES_ITERATE_OVER_UNAMBIGUOUS_POS_PERMUTATIONS_AT_START
			#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_CONSECUTIVE_POS	//trial SANI1n7b	//should be moved out of SANI_SEQUENCE_GRAMMAR_GENERATE_SUBNETS_BASED_ON_POS_UNAMBIGUOUS_SEGMENTS
			#ifdef SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_CONSECUTIVE_POS
				#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_CONSECUTIVE_POS_MAX_ALLOWED (2)
			#endif
		//#endif
	#endif
		
	#define SANI_SEQUENCE_GRAMMAR_GENERATE_SUBNETS_BASED_ON_POS_UNAMBIGUOUS_SEGMENTS	//SANI1n5c	//inactive
	#ifdef SANI_SEQUENCE_GRAMMAR_GENERATE_SUBNETS_BASED_ON_POS_UNAMBIGUOUS_SEGMENTS
		#define SANI_SEQUENCE_GRAMMAR_GENERATE_SUBNETS_BASED_ON_POS_UNAMBIGUOUS_SEGMENTS_MIN_LENGTH (2)
		//#define SANI_SEQUENCE_GRAMMAR_ENSURE_TOP_LEVEL_NEURON_FOUND	//SANI1n5b	//inactive
		#ifdef SANI_SEQUENCE_GRAMMAR_ENSURE_TOP_LEVEL_NEURON_FOUND
			#define SANI_SEQUENCE_GRAMMAR_RECORD_TOP_LEVEL_NEURONS
		#endif
		

	#else
		#define SANI_SEQUENCE_GRAMMAR_GENERATE_VERIFY_MORE_THAN_ONE_SECTION_FOUND	//SANI1n5b
	#endif
		
	#ifdef SANI_SEQUENCE_GRAMMAR	//#ifndef GIA_POS_REL_TRANSLATOR_RULES_USE
		//#define SANI_SEQUENCE_GRAMMAR_SUPPORT_VARIABLE_COMPONENTS_STRING_OR_GROUP	//SANI1n3a	//inactive
		#ifdef SANI_SEQUENCE_GRAMMAR_SUPPORT_VARIABLE_COMPONENTS_STRING_OR_GROUP
			//#define SANI_SEQUENCE_GRAMMAR_SUPPORT_VARIABLE_COMPONENTS_STRING	//SANI1n3b	//incomplete
		#endif
	#endif
	
	#define SANI_SEQUENCE_GRAMMAR_VARIABLE_COMPONENTS
	#ifdef SANI_SEQUENCE_GRAMMAR_VARIABLE_COMPONENTS
		//#define SANI_SEQUENCE_GRAMMAR_COMPONENT_GENERATE_VARIABLE_COMPONENTS	//SANI1j-1m (generates variable first/last components when generating network)
		#ifdef SANI_SEQUENCE_GRAMMAR_COMPONENT_GENERATE_VARIABLE_COMPONENTS
			#ifdef SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS
				#define SANI_SEQUENCE_GRAMMAR_COMPONENT_GENERATE_VARIABLE_FIRST_COMPONENTS	//SANI1j5a	//optional
				#define SANI_SEQUENCE_GRAMMAR_COMPONENT_GENERATE_VARIABLE_LAST_COMPONENTS	//SANI1l8e	//optional	//not robust
				#ifdef SANI_SEQUENCE_GRAMMAR_COMPONENT_GENERATE_VARIABLE_FIRST_COMPONENTS
					#define SANI_SEQUENCE_GRAMMAR_COMPONENT_IDENTIFY_VARIABLE_COMPONENTS_SHARED
				#endif
				#ifdef SANI_SEQUENCE_GRAMMAR_COMPONENT_GENERATE_VARIABLE_LAST_COMPONENTS
					#define SANI_SEQUENCE_GRAMMAR_COMPONENT_IDENTIFY_VARIABLE_COMPONENTS_SHARED
				#endif
			#else
				#define SANI_SEQUENCE_GRAMMAR_COMPONENT_GENERATE_VARIABLE_FIRST_COMPONENTS	//SANI1j5a	//optional
				#ifdef SANI_SEQUENCE_GRAMMAR_COMPONENT_GENERATE_VARIABLE_FIRST_COMPONENTS
					#define SANI_SEQUENCE_GRAMMAR_COMPONENT_IDENTIFY_VARIABLE_COMPONENTS_SHARED
				#endif
			#endif
		#else
			#ifdef SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS
				#define SANI_SEQUENCE_GRAMMAR_COMPONENT_IDENTIFY_VARIABLE_COMPONENTS	//SANI1n1a (generates variable first/last components posthoc after generating network)
				#ifdef SANI_SEQUENCE_GRAMMAR_COMPONENT_IDENTIFY_VARIABLE_COMPONENTS
					#define SANI_SEQUENCE_GRAMMAR_COMPONENT_IDENTIFY_VARIABLE_FIRST_COMPONENTS	//SANI1n1a	//optional
					#define SANI_SEQUENCE_GRAMMAR_COMPONENT_IDENTIFY_VARIABLE_LAST_COMPONENTS	//SANI1n1a	//optional
					//#define SANI_SEQUENCE_GRAMMAR_COMPONENT_IDENTIFY_VARIABLE_CENTRAL_COMPONENTS	//SANI1m4a	//optional
				#endif
			#endif	
		#endif
	#endif
	
	#ifdef SANI_SEQUENCE_GRAMMAR_COMPONENT_IDENTIFY_VARIABLE_COMPONENTS
	
		//#define SANI_SEQUENCE_GRAMMAR_COMPONENT_IDENTIFY_VARIABLE_COMPONENTS_ONE_PER_SENTENCE	//SANI1n4a	//inactive
		
		#define SANI_SEQUENCE_GRAMMAR_COMPONENT_IDENTIFY_VARIABLE_COMPONENTS_SHARED
		
		#define SANI_SEQUENCE_GRAMMAR_COMPONENT_IDENTIFY

		#define SANI_SEQUENCE_GRAMMAR_RECORD_NEWLY_GENERATED_NEURONS		//store newly created sentence neurons in newHiddenLayerGroupsTemp
		#ifdef SANI_SEQUENCE_GRAMMAR_RECORD_NEWLY_GENERATED_NEURONS	//not yet defined
			#define SANI_SEQUENCE_GRAMMAR_COMPONENT_IDENTIFY_VERIFY_NOT_NEWLY_CREATED
			//#define SANI_SEQUENCE_GRAMMAR_RECORD_NEWLY_GENERATED_NEURONS_UPDATE_DURING_IDENTIFY
		#endif

		#define SANI_SEQUENCE_GRAMMAR_COMPONENT_IDENTIFY_DETECTED_EDGE_OF_SENTENCE	//SANI1n1a
		#ifdef SANI_SEQUENCE_GRAMMAR_COMPONENT_IDENTIFY_DETECTED_EDGE_OF_SENTENCE
			#define SANI_SEQUENCE_GRAMMAR_COMPONENT_IDENTIFY_VARIABLE_COMPONENTS_ENSURE_VARIABLE_COMPONENT_ENCAPSULATES_EDGE_OF_SENTENCE	//SANI1n1a
			//#define SANI_SEQUENCE_GRAMMAR_COMPONENT_IDENTIFY_VARIABLE_COMPONENTS_ENSURE_NONVARIABLE_COMPONENT_ENCAPSULATES_EDGE_OF_SENTENCE	//SANI1n1a
		#endif
		
		
		#ifdef SANI_SEQUENCE_GRAMMAR_COMPONENT_IDENTIFY_VARIABLE_FIRST_COMPONENTS
			#define SANI_SEQUENCE_GRAMMAR_COMPONENT_SUPPORT_VARIABLE_FIRST_COMPONENTS
			#define SANI_SEQUENCE_GRAMMAR_COMPONENT_IDENTIFY_VARIABLE_COMPONENTS_FIRST_COMPONENTS_SHARED
			
			//replicates preconditions from SANI_SEQUENCE_GRAMMAR_COMPONENT_GENERATE_VARIABLE_FIRST_COMPONENTS: SANIpropagateOperationsClass::identifyMissingOrVariableStartComponentFound:
			#ifndef SANI_SEQUENCE_GRAMMAR_SUPPORT_VARIABLE_COMPONENTS_STRING
				#define SANI_SEQUENCE_GRAMMAR_COMPONENT_IDENTIFY_VARIABLE_COMPONENTS_FIRST_COMPONENTS_NON_STRING	//prevents a variable component mergers containing both a string and a group (invalid componentType)
			#endif
			#define SANI_SEQUENCE_GRAMMAR_COMPONENT_IDENTIFY_VARIABLE_COMPONENTS_DISABLE_MULTIPLE_INPUTS_IF_HAS_IDENTICAL_COMPONENTS
			#define SANI_SEQUENCE_GRAMMAR_COMPONENT_IDENTIFY_VARIABLE_COMPONENTS_FIRST_COMPONENTS_ALL_NEURONS_IN_FIRST_COMPONENT_SUBGROUPS_ARE_UNIQUE
			#define SANI_SEQUENCE_GRAMMAR_COMPONENT_IDENTIFY_VARIABLE_COMPONENTS_FIRST_COMPONENTS_ALL_NEURONS_IN_LAST_COMPONENT_SUBGROUPS_ARE_UNIQUE	//enabled SANI1n6c

		#endif
		#ifdef SANI_SEQUENCE_GRAMMAR_COMPONENT_IDENTIFY_VARIABLE_LAST_COMPONENTS
			#define SANI_SEQUENCE_GRAMMAR_COMPONENT_SUPPORT_VARIABLE_LAST_COMPONENTS
			#define SANI_SEQUENCE_GRAMMAR_COMPONENT_IDENTIFY_VARIABLE_COMPONENTS_LAST_COMPONENTS_SHARED
			
			//replicates preconditions from SANI_SEQUENCE_GRAMMAR_COMPONENT_GENERATE_VARIABLE_LAST_COMPONENTS: SANIpropagateOperationsClass::identifyMissingOrVariableEndComponentFound:
			#ifndef SANI_SEQUENCE_GRAMMAR_SUPPORT_VARIABLE_COMPONENTS_STRING
				#define SANI_SEQUENCE_GRAMMAR_COMPONENT_IDENTIFY_VARIABLE_COMPONENTS_LAST_COMPONENTS_NON_STRING	//prevents a variable component mergers containing both a string and a group (invalid componentType)
			#endif
			#define SANI_SEQUENCE_GRAMMAR_COMPONENT_IDENTIFY_VARIABLE_COMPONENTS_DISABLE_MULTIPLE_INPUTS_IF_HAS_IDENTICAL_COMPONENTS
			#define SANI_SEQUENCE_GRAMMAR_COMPONENT_IDENTIFY_VARIABLE_COMPONENTS_LAST_COMPONENTS_ALL_NEURONS_IN_FIRST_COMPONENT_SUBGROUPS_ARE_UNIQUE	//enabled SANI1n5a
			//#define SANI_SEQUENCE_GRAMMAR_COMPONENT_IDENTIFY_VARIABLE_COMPONENTS_LAST_COMPONENTS_ALL_NEURONS_IN_LAST_COMPONENT_SUBGROUPS_ARE_UNIQUE		
		#endif
	#endif
	
#endif

//#define SANI_DEBUG_DISABLE_1m_CODE
#ifndef SANI_DEBUG_DISABLE_1m_CODE

	//debug variables (should all be disabled by default):
	//#define SANI_DEBUG_RULES_PRINT_SENTENCES
	//#define SANI_DEBUG_SEQUENCE_GRAMMAR_NETWORK_NODES

	#define SANI_TEXT_BASE_FILE_NAME "inputText"
	#define SANI_TEXT_FILE_EXTENSION ".txt"
	#define SANI_SEQUENTIAL_NET_BASE_FILE_NAME "sequentialNet"
	#define SANI_TEXT_FILE_WITH_LRP_PREPEND "WithLRP"
		
	//#define SANI_SUPPORT_QUERIES	//uncoded
	//#define SANI_SUPPORT_SEQUENTIAL_NET_XML_IO	//uncoded
	#ifdef SANI_SUPPORT_SEQUENTIAL_NET_XML_IO
		#define SANI_QUERY_FILE_PREPEND "Query"
		#define SANI_SEQUENTIAL_NET_XML_FILE_EXTENSION ".xml"
		#define SANI_SEQUENTIAL_NET_BASE_QUERY_FILE_NAME SANI_SEQUENTIAL_NET_BASE_FILE_NAME SANI_QUERY_FILE_PREPEND

	#endif
	
	#ifndef SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS
		//#ifdef SANI_SEQUENCE_GRAMMAR_NEVER_SPLIT_GROUP_BETWEEN_TWO_IDENTICAL_COMPONENTS	//not yet defined
			//#define SANI_SEQUENCE_GRAMMAR_NEVER_SPLIT_GROUP_BETWEEN_TWO_IDENTICAL_COMPONENTS_SUPPORT_VARIABLE_FIRST_COMPONENTS	//SANI1m2a/b, updated SANI1m6e	//incomplete
			#ifdef SANI_SEQUENCE_GRAMMAR_NEVER_SPLIT_GROUP_BETWEEN_TWO_IDENTICAL_COMPONENTS_SUPPORT_VARIABLE_FIRST_COMPONENTS
				//#define SANI_SEQUENCE_GRAMMAR_NEVER_SPLIT_GROUP_BETWEEN_TWO_IDENTICAL_COMPONENTS_SUPPORT_VARIABLE_FIRST_COMPONENTS_ADVANCED	//SANI1m6e	//incomplete
			#endif
		//#endif
	#endif
		
	//#define SANI_SEMANTIC_NETWORK	//SANI1m1a	//store semantic network within SANI parse tree rather than generating from SANI parse tree
	#ifdef SANI_SEMANTIC_NETWORK
		#define SANI_SEQUENCE_GRAMMAR_INPUT_WORDS	//SANI1m1a	//input words rather than pos values into SANI
		#ifdef SANI_SEQUENCE_GRAMMAR_INPUT_WORDS
			#define GIA_POS_REL_TRANSLATOR_RULES_ITERATE_OVER_UNAMBIGUOUS_POS_PERMUTATIONS_AT_START_DISABLE	//SANI1m1a
			#define SANI_SEQUENCE_GRAMMAR_INPUT_WORDS_LEMMAS	//optional (feed lemmas rather than exact words)
		#endif
	#endif
	
	//#define SANI_SEQUENCE_GRAMMAR_COMPONENT_GENERATE_VARIABLE_FIRST_COMPONENTS_SIMPLIFY2	//SANI1m6a (incomplete)
	
	#define SANI_SEQUENCE_GRAMMAR_STORE_SENTENCE_INDEXING	//SANI1m5e - make default
	
	//#define SANI_SEQUENCE_GRAMMAR_LINK_SIMILAR_SUBNETS
	#ifdef SANI_SEQUENCE_GRAMMAR_LINK_SIMILAR_SUBNETS

		#ifdef SANI_SEQUENCE_GRAMMAR_INPUT_WORDS
			#define SANI_SEQUENCE_GRAMMAR_REFERENCE_SET_IDENTIFICATION
			#ifdef SANI_SEQUENCE_GRAMMAR_REFERENCE_SET_IDENTIFICATION
				#define SANI_SEQUENCE_GRAMMAR_COMPONENT_IDENTIFY
				
				//#define SANI_SEQUENCE_GRAMMAR_REFERENCE_SET_IDENTIFICATION_PREPROCESSOR	//not yet coded - TODO: perform logic reference, reference, [and sub reference] set identification (using SANIpropagateLightOptimised) before generating SANI network, ensuring that logic/sub/reference set delimiters are assigned to top/high level neurons within SANI network
				#define SANI_SEQUENCE_GRAMMAR_REFERENCE_SET_IDENTIFICATION_WITHOUT_SEQUENTIALITY	//SANI1m5a - perform SANI reference set identification without sequentially enforced [from start and from end of sentence]
				#ifdef SANI_SEQUENCE_GRAMMAR_REFERENCE_SET_IDENTIFICATION_WITHOUT_SEQUENTIALITY
					#define SANI_DEBUG_SEQUENCE_GRAMMAR_REFERENCE_SET_IDENTIFICATION_WITHOUT_SEQUENTIALITY
					
					//#define SANI_SEQUENCE_GRAMMAR_ADD_NEW_NEURONS_TO_ELONGATED_TREE	//trial
					#define SANI_DEBUG_PROPAGATE_ASSIGN_GROUP_INDICES_TO_INPUT_NEURONS	//debug only
					
					#define SANI_SEQUENCE_GRAMMAR_REFERENCE_SET_IDENTIFICATION_WITHOUT_SEQUENTIALITY_MIN_MATCHES (2)	//CHECKTHIS
					#define SANI_SEQUENCE_GRAMMAR_REFERENCE_SET_IDENTIFICATION_WITHOUT_SEQUENTIALITY_THRESHOLD_MATCH_PERCENT_REQUISITE (0.7)	//percentage numberMatchesV2/numberCandidatesV1
					//#define SANI_SEQUENCE_GRAMMAR_REFERENCE_SET_IDENTIFICATION_WITHOUT_SEQUENTIALITY_THRESHOLD_PERCENT_TRUE_POSITIVES_V1 (0.7)	//percentage matches for V1	//CHECKTHIS
					//#define SANI_SEQUENCE_GRAMMAR_REFERENCE_SET_IDENTIFICATION_WITHOUT_SEQUENTIALITY_THRESHOLD_PERCENT_TRUE_POSITIVES_V2 (0.7)	//percentage matches for V2	//CHECKTHIS
					#define SANI_SEQUENCE_GRAMMAR_REFERENCE_SET_IDENTIFICATION_WITHOUT_SEQUENTIALITY_LINK
					#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_GENERATE_TEMP_RECORD_METHOD2		//record parse tree neurons (need to check against new neurons generated for sentence and stored by method 1)
					#ifdef SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_GENERATE_TEMP_RECORD_METHOD2
						#define SANI_SEQUENCE_GRAMMAR_RECORD_NEWLY_GENERATED_NEURONS		//store newly created sentence neurons in newHiddenLayerGroupsTemp
						
						#define SANI_SEQUENCE_GRAMMAR_REFERENCE_SET_IDENTIFICATION_WITHOUT_SEQUENTIALITY_RECENCY	//SANI1m5b
						#ifdef SANI_SEQUENCE_GRAMMAR_REFERENCE_SET_IDENTIFICATION_WITHOUT_SEQUENTIALITY_RECENCY
							#define SANI_SEQUENCE_GRAMMAR_REFERENCE_SET_IDENTIFICATION_WITHOUT_SEQUENTIALITY_RECENCY_MATCH_PERCENTAGE_REQUISITE (0.5)	//pecentage totalMatchRecencyV2/totalParseTreeRecencyV1 //CHECKTHIS
							#define SANI_SEQUENCE_GRAMMAR_STORE_RECENCY
							#ifdef SANI_SEQUENCE_GRAMMAR_STORE_RECENCY
								//#define SANI_SEQUENCE_GRAMMAR_STORE_RECENCY_UPDATE_ALL_PROPAGATED_NEURONS
								#ifndef SANI_SEQUENCE_GRAMMAR_STORE_RECENCY_UPDATE_ALL_PROPAGATED_NEURONS
									#define SANI_SEQUENCE_GRAMMAR_STORE_RECENCY_UPDATE_SUCCESSFULLY_PARSED_NEURONS
									#ifdef SANI_SEQUENCE_GRAMMAR_STORE_RECENCY_UPDATE_SUCCESSFULLY_PARSED_NEURONS
										#define SANI_SEQUENCE_GRAMMAR_STORE_RECENCY_UPDATE_SUCCESSFULLY_PARSED_NEURONS_BEFORE_REFERENCE_SET_IDENTIFICATION
										#ifndef SANI_SEQUENCE_GRAMMAR_STORE_RECENCY_UPDATE_SUCCESSFULLY_PARSED_NEURONS_BEFORE_REFERENCE_SET_IDENTIFICATION
											#define SANI_SEQUENCE_GRAMMAR_STORE_RECENCY_UPDATE_SUCCESSFULLY_PARSED_NEURONS_AFTER_REFERENCE_SET_IDENTIFICATION	//consider updating recency posthoc (thereby using old network recency data during reference set identification)
										#endif
									#endif
								#endif
							#endif
						#endif
					#endif
					#ifdef SANI_SEQUENCE_GRAMMAR_RECORD_NEWLY_GENERATED_NEURONS
						#define SANI_SEQUENCE_GRAMMAR_REFERENCE_SET_IDENTIFICATION_WITHOUT_SEQUENTIALITY_VERIFY_NOT_NEWLY_CREATED
					#endif
				#endif
			#endif
		#endif
	#endif

	#ifdef SANI_SEQUENCE_GRAMMAR_RECORD_NEWLY_GENERATED_NEURONS
		#define SANI_SEQUENCE_GRAMMAR_RECORD_NEWLY_GENERATED_NEURONS_INDIVIDUALLY	//mark all neurons in newHiddenLayerGroupsTemp
	#endif				
						
	#ifdef SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS
		
		//#ifdef SANI_SEQUENCE_GRAMMAR_ADD_NEW_NEURONS_TO_SYMMETRICAL_TREE	//not yet defined (generation code implementation has not yet been derived for ELONGATED_TREE)
			#ifdef SANI_SEQUENCE_GRAMMAR_COMPONENT_IDENTIFY_VARIABLE_CENTRAL_COMPONENTS
				#define SANI_SEQUENCE_GRAMMAR_COMPONENT_IDENTIFY_VARIABLE_CENTRAL_COMPONENTS_LINK	//SANI1m5a
			#endif
		//#endif
	#endif	
#endif

#ifndef SANI_SEQUENCE_GRAMMAR
	//#ifdef GIA_POS_REL_TRANSLATOR_RULES_USE	//not yet defined
		#define SANI_SUPPORT_COMPONENTS_OPTIONAL
		#define SANI_SUPPORT_COMPONENTS_OR
		#define SANI_SUPPORT_COMPONENTS_REPEAT
		#define SANI_SUPPORT_COMPONENTS_SUB
	//#endif
#endif			

//#define SANI_DEBUG_DISABLE_1l_CODE
#ifndef SANI_DEBUG_DISABLE_1l_CODE
	
	//debug variables (should all be disabled by default):
	//#define SANI_DEBUG_RULES_PRINT_SENTENCES
	//#define SANI_DEBUG_PROPAGATE_TRACE
	#ifdef SANI_DEBUG_PROPAGATE_TRACE
		#define SANI_DEBUG_PROPAGATE
		#define SANI_DEBUG_PROPAGATE_EXTRA3  //detailed debug
		#define SANI_DEBUG_PROPAGATE_EXTRA4
	#endif
	//#define SANI_DEBUG_SEQUENCE_GRAMMAR_BASIC2
	#ifdef SANI_DEBUG_SEQUENCE_GRAMMAR_BASIC2
		#define SANI_DEBUG_FORMATION2
	#endif

	//QA variables:
	#ifdef SANI_SEQUENCE_GRAMMAR
		//#define SANI_SEQUENCE_GRAMMAR_ENSURE_ONLY_ONE_TOP_LEVEL_NEURON_FOUND_PER_SENTENCE	//SANI1l4a	//CHECKTHIS	//this ensures that multiple grammatically valid parse trees are not generated for any sentence POS permutation	//note this is not required if the algorithm can select the highest weighted valid parse tree
	#endif
	
	//#define SANI_DEBUG_SEQUENCE_GRAMMAR_SINGLE_POS_PERMUTATION
	//#define SANI_DEBUG_SEQUENCE_GRAMMAR_MAX_POS_PERMUTATIONS
	#ifdef SANI_DEBUG_SEQUENCE_GRAMMAR_MAX_POS_PERMUTATIONS
		#define SANI_DEBUG_SEQUENCE_GRAMMAR_MAX_POS_PERMUTATIONS_NUM (9)		
		#define SANI_DEBUG_SEQUENCE_GRAMMAR_MAX_POS_PERMUTATIONS_FOR_PARTICULAR_SENTENCE	//temp
		#ifdef SANI_DEBUG_SEQUENCE_GRAMMAR_MAX_POS_PERMUTATIONS_FOR_PARTICULAR_SENTENCE
			#define SANI_DEBUG_SEQUENCE_GRAMMAR_MAX_POS_PERMUTATIONS_FOR_PARTICULAR_SENTENCE_INDEX (2)
		#endif
	#endif

	#define SANI_SEQUENCE_GRAMMAR_VERIFICATION	//not required	//should be activated for software verification	//can be disabled for specific debugging
	#define SANI_SEQUENCE_WORDCONNECTIVITY_VERIFICATION	//SANI1j5aTEMP53	//not required 	//should be activated for software verification
	#ifdef SANI_SEQUENCE_WORDCONNECTIVITY_VERIFICATION
		#define SANI_DEBUG_SEQUENCE_GRAMMAR_WORDCONNECTIVITY_VERIFICATION_CONTINUOUS	//SANI1j15a //continuous verification of SANI_SEQUENCE_WORDCONNECTIVITY_VERIFICATION
	#endif
		
	
	//#define SANI_SEQUENCE_GRAMMAR_IDENTIFY_SEMANTIC_RELATIONS	//SANI1lXa	//untested //connect/associate simultaneously activated neurons (to semantic relation neuron)
	
	//#ifdef SANI_ANN	//not yet defined
		#define SANI_ANN_GROUP_INDEX_DISPLAY_FORMAT_NUMBER_CHARACTERS (4)	//eg; instance=groupIndex:0001
	//#endif
	
	#ifdef SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS
	
		//#ifdef SANI_SEQUENCE_GRAMMAR_SUPPORT_PARTIAL_SENTENCE_PROPAGATION	//not yet defined
			//#ifdef SANI_SEQUENCE_GRAMMAR_ADD_NEW_NEURONS_TO_SYMMETRICAL_TREE	//not yet defined (generation code implementation has not yet been derived for ELONGATED_TREE)
				#ifdef SANI_SEQUENCE_GRAMMAR_COMPONENT_GENERATE_VARIABLE_LAST_COMPONENTS
					#define SANI_SEQUENCE_GRAMMAR_COMPONENT_SUPPORT_VARIABLE_LAST_COMPONENTS	//SANI1l8e
					
					#define SANI_SEQUENCE_GRAMMAR_COMPONENT_GENERATE_VARIABLE_LAST_COMPONENTS_PREFERENCE_THEM	//this preferences merging existing groups over creating new groups 

					#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_GENERATE_VARIABLE_LAST_COMPONENTS	//SANI1l6b	
					#ifdef SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_GENERATE_VARIABLE_LAST_COMPONENTS
						
						//#ifdef SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_PREVENT_RESET_IF_REPEATED_SEQUENCE_DETECTED	//not yet defined
							#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_PREVENT_RESET_IF_REPEATED_SEQUENCE_DETECTED_AND_WORD_INDEX_NOT_ALREADY_ENCAPSULATED_BY_HIGHER_LEVEL_GROUP_PREVIOUS_COMPONENT
						//#endif
						
						#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_GENERATE_VARIABLE_LAST_COMPONENTS_GENERATE_DETECT_COVERAGE_SUPPORT_VARIABLE_END_COMPONENT	//SANI1l7c
						
						//#ifdef SANI_ENFORCE_WORD_CONNECTIVITY_BETWEEN_PREVIOUS_ACTIVE_COMPONENTS_AND_NEWLY_ACTIVATED_COMPONENT_PRECHECKS	//not yet defined
							#define SANI_ENFORCE_WORD_CONNECTIVITY_BETWEEN_PREVIOUS_ACTIVE_COMPONENTS_AND_NEWLY_ACTIVATED_COMPONENT_PRECHECKS2	//SANI1l6c
						//#endif

						//replications of conditions defined in SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_GENERATE_VARIABLE_FIRST_COMPONENTS;

						#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_GENERATE_VARIABLE_COMPONENTS

						#define SANI_SEQUENCE_GRAMMAR_COMPONENT_IDENTIFY_VARIABLE_COMPONENTS_LAST_COMPONENTS_SHARED
						#ifndef SANI_SEQUENCE_GRAMMAR_SUPPORT_VARIABLE_COMPONENTS_STRING
							#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_GENERATE_VARIABLE_LAST_COMPONENTS_NON_STRING
							#ifdef SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_GENERATE_VARIABLE_LAST_COMPONENTS_NON_STRING
								#define SANI_SEQUENCE_GRAMMAR_COMPONENT_IDENTIFY_VARIABLE_COMPONENTS_LAST_COMPONENTS_NON_STRING
							#endif
						#endif

						#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_DISABLE_MULTIPLE_INPUTS_IF_HAS_IDENTICAL_COMPONENTS
						#ifdef SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_DISABLE_MULTIPLE_INPUTS_IF_HAS_IDENTICAL_COMPONENTS
							#define SANI_SEQUENCE_GRAMMAR_COMPONENT_IDENTIFY_VARIABLE_COMPONENTS_DISABLE_MULTIPLE_INPUTS_IF_HAS_IDENTICAL_COMPONENTS
						#endif
				
						#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_GENERATE_VARIABLE_LAST_COMPONENTS_LAST_COMP_REQUIRE_SIZEABLE_SUBTREE
						#ifdef SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_GENERATE_VARIABLE_LAST_COMPONENTS_LAST_COMP_REQUIRE_SIZEABLE_SUBTREE
							#define SANI_SEQUENCE_GRAMMAR_RECORD_DEPTH
							#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_GENERATE_VARIABLE_LAST_COMPONENTS_LAST_COMP_REQUIRE
							#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_GENERATE_VARIABLE_LAST_COMPONENTS_LAST_COMP_REQUIRE_SIZEABLE_SUBTREE_MIN_NEURONS (2)
						#endif

						#ifndef SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_GENERATE_VARIABLE_LAST_COMPONENTS_LAST_COMP_REQUIRE_SIZEABLE_SUBTREE
							#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_GENERATE_VARIABLE_LAST_COMPONENTS_LAST_COMP_REQUIRE_MATCHING_DEPTH	//SANI1l6c
							#ifdef SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_GENERATE_VARIABLE_LAST_COMPONENTS_LAST_COMP_REQUIRE_MATCHING_DEPTH
								#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_GENERATE_VARIABLE_COMPONENTS_X_COMP_REQUIRE_MATCHING_DEPTH
								#define SANI_SEQUENCE_GRAMMAR_RECORD_DEPTH
								#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_GENERATE_VARIABLE_LAST_COMPONENTS_LAST_COMP_REQUIRE
							#endif
						#endif

						//#ifdef SANI_SEQUENCE_PREVENT_INTRASENTENCE_MATCHING	//not yet defined

							#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_SUPPORT_VARIABLE_LAST_COMPONENT_ALL_NEURONS_IN_FIRST_COMPONENT_SUBGROUPS_ARE_UNIQUE	//enabled SANI1n6d (based on SANI1n5a)
							#ifdef SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_SUPPORT_VARIABLE_LAST_COMPONENT_ALL_NEURONS_IN_FIRST_COMPONENT_SUBGROUPS_ARE_UNIQUE
								#define SANI_SEQUENCE_GRAMMAR_COMPONENT_IDENTIFY_VARIABLE_COMPONENTS_LAST_COMPONENTS_ALL_NEURONS_IN_FIRST_COMPONENT_SUBGROUPS_ARE_UNIQUE
							#endif
							//#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_SUPPORT_VARIABLE_LAST_COMPONENT_ALL_NEURONS_IN_LAST_COMPONENT_SUBGROUPS_ARE_UNIQUE
							#ifdef SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_SUPPORT_VARIABLE_LAST_COMPONENT_ALL_NEURONS_IN_LAST_COMPONENT_SUBGROUPS_ARE_UNIQUE
								#define SANI_SEQUENCE_GRAMMAR_COMPONENT_IDENTIFY_VARIABLE_COMPONENTS_LAST_COMPONENTS_ALL_NEURONS_IN_LAST_COMPONENT_SUBGROUPS_ARE_UNIQUE
							#endif
							
							#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_SUPPORT_VARIABLE_LAST_COMPONENT_FIRST_AND_LAST_COMPONENT_SUBGROUPS_ARE_UNIQUE
							#ifdef SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_SUPPORT_VARIABLE_LAST_COMPONENT_FIRST_AND_LAST_COMPONENT_SUBGROUPS_ARE_UNIQUE
								#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_SUPPORT_VARIABLE_LAST_COMPONENT_FIRST_AND_LAST_COMPONENT_SUBGROUPS_ARE_UNIQUE_POST
								#ifndef SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_SUPPORT_VARIABLE_LAST_COMPONENT_FIRST_AND_LAST_COMPONENT_SUBGROUPS_ARE_UNIQUE_POST
									#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_SUPPORT_VARIABLE_LAST_COMPONENT_FIRST_AND_LAST_COMPONENT_SUBGROUPS_ARE_UNIQUE_PRE
									#ifdef SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_SUPPORT_VARIABLE_LAST_COMPONENT_FIRST_AND_LAST_COMPONENT_SUBGROUPS_ARE_UNIQUE_PRE
										#define SANI_SEQUENCE_PREVENT_INTRASENTENCE_MATCHING_HISTORY
										#define SANI_SEQUENCE_GRAMMAR_GENERATE_ENSURE_ALL_NEURONS_IN_SUBGROUP_ARE_NOT_USED_BY_ANY_NEW_CANDIDATE
									#endif
								#endif
							#endif
						//#endif

					#endif
				#endif
				
				#ifdef SANI_SEQUENCE_GRAMMAR_COMPONENT_SUPPORT_VARIABLE_LAST_COMPONENTS
					#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_SUPPORT_VARIABLE_COMPONENTS
					
                			#define SANI_SEQUENCE_GRAMMAR_SUPPORT_VARIABLE_LAST_COMPONENTS_REMEMBER_FIRST_COMPONENT_WORD_INDEX	//SANI1l7a	//see SANI_ALLOW_MULTIPLE_ACTIVATIONS
                                        #ifdef SANI_SEQUENCE_GRAMMAR_SUPPORT_VARIABLE_LAST_COMPONENTS_REMEMBER_FIRST_COMPONENT_WORD_INDEX
						//#assert SANI_PARSE_SAVE_PARSE_TREE	//note SANI1l7b implementation currently requires memory of parseComponent->neuronComponentConnectionActiveWordRecord and parseComponent->parseTreeGroupRef such that the last components can be replaced/overwritten if necessary	//incompatible with principle/intent of SANI_BIO_DO_NOT_RELY_ON_PARSE_TREE_MEMORY?
					#endif
				#endif
			//#endif
		//#endif
		
		#ifdef SANI_SEQUENCE_GRAMMAR_COMPONENT_GENERATE_VARIABLE_FIRST_COMPONENTS	
			//#ifdef SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_GENERATE_VARIABLE_FIRST_COMPONENTS	//not yet defined

				#define SANI_SEQUENCE_GRAMMAR_COMPONENT_IDENTIFY_VARIABLE_COMPONENTS_FIRST_COMPONENTS_SHARED
				#ifndef SANI_SEQUENCE_GRAMMAR_SUPPORT_VARIABLE_COMPONENTS_STRING
					#define SANI_SEQUENCE_GRAMMAR_COMPONENT_GENERATE_VARIABLE_FIRST_COMPONENTS_NON_STRING
					#ifdef SANI_SEQUENCE_GRAMMAR_COMPONENT_GENERATE_VARIABLE_FIRST_COMPONENTS_NON_STRING
						#define SANI_SEQUENCE_GRAMMAR_COMPONENT_IDENTIFY_VARIABLE_COMPONENTS_FIRST_COMPONENTS_NON_STRING
					#endif
				#endif

				//#ifndef SANI_SEQUENCE_GRAMMAR_COMPONENT_GENERATE_VARIABLE_FIRST_COMPONENTS_VARIABLE	//not yet defined
					#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_GENERATE_VARIABLE_FIRST_COMPONENTS_SIMPLIFIED	//SANI1l6a	//check dependency on findAndReconcileIncrementalVariationLimitNumComponentsSection (vs findAndReconcileIncrementalVariation)
				//#endif

				//#ifdef SANI_SEQUENCE_GRAMMAR_ADD_NEW_NEURONS_TO_SYMMETRICAL_TREE	//not yet defined
					#define SANI_SEQUENCE_GRAMMAR_ADD_NEW_NEURONS_TO_SYMMETRICAL_TREE_ALWAYS_UPDATE_COMPONENT_INDICES	//SANI1l6a	//redundant

					#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_GENERATE_VARIABLE_FIRST_COMPONENTS_FIRST_COMP_REQUIRE_SIZEABLE_SUBTREE	//SANI1l5a
					#ifdef SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_GENERATE_VARIABLE_FIRST_COMPONENTS_FIRST_COMP_REQUIRE_SIZEABLE_SUBTREE
						#define SANI_SEQUENCE_GRAMMAR_RECORD_DEPTH
						#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_GENERATE_VARIABLE_FIRST_COMPONENTS_FIRST_COMP_REQUIRE
						#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_GENERATE_VARIABLE_FIRST_COMPONENTS_FIRST_COMP_REQUIRE_SIZEABLE_SUBTREE_MIN_NEURONS (2)
						#ifdef SANI_SEQUENCE_GRAMMAR_COMPONENT_GENERATE_VARIABLE_FIRST_COMPONENTS_NON_STRING
							#define SANI_SEQUENCE_GRAMMAR_COMPONENT_GENERATE_VARIABLE_FIRST_COMPONENTS_NON_STRING_COMPREHENSIVE
						#endif
					#endif
				//#endif
			//#endif
		#endif
		
	#endif
	
	//added SANI1m6d (reenable code from SANI1l6a);
	#ifdef SANI_SEQUENCE_GRAMMAR_COMPONENT_GENERATE_VARIABLE_FIRST_COMPONENTS	
		#ifndef SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS	//#ifndef SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_GENERATE_VARIABLE_FIRST_COMPONENTS	
			#define SANI_SEQUENCE_GRAMMAR_COMPONENT_IDENTIFY_VARIABLE_COMPONENTS_FIRST_COMPONENTS_SHARED
			#ifndef SANI_SEQUENCE_GRAMMAR_SUPPORT_VARIABLE_COMPONENTS_STRING
				#define SANI_SEQUENCE_GRAMMAR_COMPONENT_GENERATE_VARIABLE_FIRST_COMPONENTS_NON_STRING
				#ifdef SANI_SEQUENCE_GRAMMAR_COMPONENT_GENERATE_VARIABLE_FIRST_COMPONENTS_NON_STRING
					#define SANI_SEQUENCE_GRAMMAR_COMPONENT_IDENTIFY_VARIABLE_COMPONENTS_FIRST_COMPONENTS_NON_STRING
					//#define SANI_SEQUENCE_GRAMMAR_COMPONENT_GENERATE_VARIABLE_FIRST_COMPONENTS_NON_STRING_COMPREHENSIVE
				#endif
			#endif
		#endif
	#endif
						
	//#ifdef SANI_ANN	//not yet defined
		//#ifdef SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS	//not yet defined
			//#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_CONTINUOUSLY_OUTPUT_NETWORK
			#ifdef SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_CONTINUOUSLY_OUTPUT_NETWORK
				#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_CONTINUOUSLY_OUTPUT_NETWORK_PROPAGATION	//SANI1l1b
				#ifdef SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_CONTINUOUSLY_OUTPUT_NETWORK_PROPAGATION
					#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_CONTINUOUSLY_OUTPUT_NETWORK_PROPAGATION_RESTRICT_TO_POST_GENERATION_PHASE	//only print propagation once network has been generated (after x sentences)	//requires inputText to include a duplication of all sentences halfway through file
					#ifdef SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_CONTINUOUSLY_OUTPUT_NETWORK_PROPAGATION_RESTRICT_TO_POST_GENERATION_PHASE
						#define SANI_SEQUENCE_GRAMMAR_STORE_SENTENCE_INDEXING
					#endif
				#else
					#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_CONTINUOUSLY_OUTPUT_NETWORK_GENERATION	//SANI1l1a
				#endif
			#endif
		//#endif
	//#endif
	
	//#define SANI_ANN_COLOUR_CONNECTIONS_BASED_ON_ACTIVATION	//SANI1l1b	//for visualisation - ensure to sync ANNglobalDefs.hpp: ANN_ALGORITHM_SANI_SEQUENCE_GRAMMAR_NETWORK_PRINT_COLOURS_ACTIVE
	#ifdef SANI_ANN_COLOUR_CONNECTIONS_BASED_ON_ACTIVATION
		#define SANI_ANN_COLOUR_CONNECTIONS_BASED_ON_ACTIVATION_INPUT_NEURONS	//SANI1l1c
	#endif
	
	#define SANI_ANN_COLOUR_CONNECTIONS_BASED_ON_COMPONENT_INDEX	//SANI1l1a	//for visualisation/debugging - ensure to sync ANNglobalDefs.hpp: ANN_ALGORITHM_SANI_SEQUENCE_GRAMMAR_NETWORK_PRINT_COLOURS_COMPONENT_ORDER
	#ifdef SANI_ANN_COLOUR_CONNECTIONS_BASED_ON_COMPONENT_INDEX
		//#ifdef SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS	//not yet defined
			#define SANI_ANN_COLOUR_CONNECTIONS_BASED_ON_COMPONENT_INDEX_EXACT
		//#else
			#define SANI_SEQUENCE_GRAMMAR_TYPICAL_MAX_NUM_COMPONENTS (5)
		//#endif
	#endif
#endif

//#define SANI_DEBUG_DISABLE_1k_CODE
#ifndef SANI_DEBUG_DISABLE_1k_CODE

	#ifdef SANI_SEQUENCE_GRAMMAR
	
	
		//debug variables (should all be disabled by default):		
		
		//#define SANI_DEBUG_SEQUENCE_GRAMMAR_PRINT_SUCCESSFULLY_TRACED_OR_GENERATED_PARSE_TREES	//SANI1k14b	//requires SANI_PARSE_GENERATE_PARSE_TREE:SANI_PARSE_SAVE_PARSE_TREE
		
		//#define SANI_DEBUG_RULES_PRINT_SENTENCES_FAIL_ONLY

		//#define SANI_DEBUG_SEQUENCE_GRAMMAR_SINGLE_POS_PERMUTATION
		//#define SANI_DEBUG_SEQUENCE_GRAMMAR_MAX_POS_PERMUTATIONS
		//#ifdef SANI_DEBUG_SEQUENCE_GRAMMAR_MAX_POS_PERMUTATIONS
		//	#define SANI_DEBUG_SEQUENCE_GRAMMAR_MAX_POS_PERMUTATIONS_NUM (7)
		//#endif
		
		//#define SANI_DEBUG_RULES_PRINT_SENTENCES
		//#define SANI_DEBUG_RULES_PRINT_PARSE_PROCESS_POS_TYPES
		//#define SANI_DEBUG_SEQUENCE_GRAMMAR_NETWORK_NODES
		
		//#define SANI_DEBUG_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_TIME
		
		//#define SANI_DEBUG_LIMIT_NUM_COMPONENTS
		
		//#define SANI_DEBUG_FORMATION2
		//#define SANI_DEBUG_PROPAGATE_TRACE
		#ifdef SANI_DEBUG_PROPAGATE_TRACE
			#define SANI_DEBUG_PROPAGATE
			#define SANI_DEBUG_PROPAGATE_EXTRA4

			//#define SANI_DEBUG_PROPAGATE_EXTRA2
			//#define SANI_DEBUG_PROPAGATE_EXTRA3_PRIMARY
		#endif
		//#define SANI_DEBUG_SEQUENCE_GRAMMAR_BASIC
		//#define SANI_DEBUG_SEQUENCE_GRAMMAR_UPDATE_ACTIVATED_NEURON_WITH_MAX_WORD_INDEX_COVERAGE
		//#define SANI_DEBUG_PROPAGATE_EXTRA3  //detailed debug
		//#define SANI_DEBUG_FORMATION
		//#define SANI_DEBUG_SEQUENCE_GRAMMAR_TRACE

		
		//QA variables:
		
		
		//#define SANI_DEBUG_PROPAGATE_ASSIGN_GROUP_INDICES_TO_INPUT_NEURONS	//SANI1k8c	//assign groupIndex to POS/input neurons

		#define SANI_SEQUENCE_GRAMMAR_THROW_SENTENCE_FAIL_ERROR_IF_ANY_POS_PERMUTATION_FAILS	//SANI1k14b - optional (usage of this parameter is dependent on user intention)
		
		/*
		#define SANI_SEQUENCE_GRAMMAR_VERIFICATION	//not required	//should be activated for software verification	//can be disabled for specific debugging
		#define SANI_SEQUENCE_WORDCONNECTIVITY_VERIFICATION	//SANI1j5aTEMP53	//not required 	//should be activated for software verification
		#ifdef SANI_SEQUENCE_WORDCONNECTIVITY_VERIFICATION
			#define SANI_DEBUG_SEQUENCE_GRAMMAR_WORDCONNECTIVITY_VERIFICATION_CONTINUOUS	//SANI1j15a //continuous verification of SANI_SEQUENCE_WORDCONNECTIVITY_VERIFICATION
		#endif
		*/
		
		
		#define SANI_FORWARD_DIRECTION	//SANI1k17a

		#define SANI_TAKE_LAST_SUCCESSFUL_PARSE_LIMIT_ITERATIONS_PREFERENCE_WEIGHT_FIX	//SANI1k13a
		
		#define SANI_SEQUENCE_GRAMMAR_ALWAYS_STORE_COMPONENT_REFS	//SANI1k13a
		
		//#define SANI_SEQUENCE_GRAMMAR_COMPONENT_GENERATE_VARIABLE_FIRST_COMPONENTS_SIMPLIFY	//SANI1k8a - untested: consider enabling in the future
		
		//#define SANI_SEQUENCE_GRAMMAR_PREVENT_RESET_IF_FIRST_INACTIVE_COMPONENT_GROUPREF_IS_SAME_AS_FUTURE_ACTIVE_COMPONENT_GROUPREF_AND_SATISIFIES_WORD_INDEX	//SANI1k4a, disabled SANI1k7a, depreciated SANI1n1a
			
		//#define SANI_SEQUENCE_GRAMMAR_EXECUTE_WORD_CONNECTIVITY_TESTS_ONCE //execute sequentialActivationConnectivityTests at start to save multiple executions	//SANI1k11b	//mandatory SANI1k13a with SANI_ENFORCE_WORD_CONNECTIVITY_BETWEEN_PREVIOUS_ACTIVE_COMPONENTS_AND_NEWLY_ACTIVATED_COMPONENT_MEMORY upgrade
		
		//#ifdef SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_GENERATE_VARIABLE_FIRST_COMPONENTS
			#define SANI_SEQUENCE_GRAMMAR_COMPONENT_GENERATE_VARIABLE_FIRST_COMPONENTS_ONLY_SUPPORT_MISSING	//SANI1k14d
			#ifdef SANI_SEQUENCE_GRAMMAR_COMPONENT_GENERATE_VARIABLE_FIRST_COMPONENTS_ONLY_SUPPORT_MISSING
				#define SANI_SEQUENCE_GRAMMAR_COMPONENT_GENERATE_VARIABLE_FIRST_COMPONENTS_MISSING	//temporarily disable for debug only
				//#define SANI_SEQUENCE_GRAMMAR_COMPONENT_GENERATE_VARIABLE_FIRST_COMPONENTS_VARIABLE
			#else
				#define SANI_SEQUENCE_GRAMMAR_COMPONENT_GENERATE_VARIABLE_FIRST_COMPONENTS_MISSING	//mandatory
				#define SANI_SEQUENCE_GRAMMAR_COMPONENT_GENERATE_VARIABLE_FIRST_COMPONENTS_VARIABLE	//mandatory	
			#endif
			/*
			NOTUSED:
			#ifdef SANI_SEQUENCE_GRAMMAR_COMPONENT_GENERATE_VARIABLE_FIRST_COMPONENTS_MISSING
				#define SANI_SEQUENCE_GRAMMAR_COMPONENT_GENERATE_VARIABLE_FIRST_COMPONENTS_MISSING_OR_VARIABLE
			#endif
			#ifdef SANI_SEQUENCE_GRAMMAR_COMPONENT_GENERATE_VARIABLE_FIRST_COMPONENTS_VARIABLE
				#define SANI_SEQUENCE_GRAMMAR_COMPONENT_GENERATE_VARIABLE_FIRST_COMPONENTS_MISSING_OR_VARIABLE
			#endif
			*/
		//#endif
						
		//#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS	//SANI1k1a
		#ifdef SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS
			
			#define SANI_ENFORCE_WORD_CONNECTIVITY_BETWEEN_PREVIOUS_ACTIVE_COMPONENTS_AND_NEWLY_ACTIVATED_COMPONENT_PRECHECKS	//made optional SANI1k17b
			
			#define SANI_SEQUENCE_GRAMMAR_MAX_NUM_COMPONENTS (2)	//each neuron has to have exactly 2 seq components
			//#define SANI_SEQUENCE_GRAMMAR_IGNORE_PARTIAL_DETECTIONS	//only detect fully activated neurons

			//#define SANI_SEQUENCE_GRAMMAR_ADD_NEW_NEURONS_TO_ELONGATED_TREE
			#ifndef SANI_SEQUENCE_GRAMMAR_ADD_NEW_NEURONS_TO_ELONGATED_TREE
				#define SANI_SEQUENCE_GRAMMAR_ADD_NEW_NEURONS_TO_SYMMETRICAL_TREE	//SANI1k15a
			#endif
			
			//#ifdef SANI_SEQUENCE_GRAMMAR_ADD_NEW_NEURONS_TO_ELONGATED_TREE	//condition added SANI1k15g //condition removed SANI1k15h - REDUNDANT_WORD_CONNECTIVITY_CHECK are not required with SANI_ENFORCE_WORD_CONNECTIVITY_BETWEEN_PREVIOUS_ACTIVE_COMPONENTS_AND_NEWLY_ACTIVATED_COMPONENT_MEMORY
				#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_DISABLE_REDUNDANT_WORD_CONNECTIVITY_CHECKS	//SANI1k4a
			//#endif
			#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_PREVENT_RESET_IF_REPEATED_SEQUENCE_DETECTED	//SANI1k7a
			#ifdef SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_PREVENT_RESET_IF_REPEATED_SEQUENCE_DETECTED
				#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_PREVENT_RESET_IF_REPEATED_SEQUENCE_DETECTED_ACTIVE	
				//#ifdef SANI_SEQUENCE_GRAMMAR_ADD_NEW_NEURONS_TO_SYMMETRICAL_TREE
					//#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_PREVENT_ACTIVATION_IF_REPEATED_SEQUENCE_MISMATCH_DETECTED	//SANI1k15c	//disabled SANI1k16a (not required with SANI_ENFORCE_WORD_CONNECTIVITY_BETWEEN_PREVIOUS_ACTIVE_COMPONENTS_AND_NEWLY_ACTIVATED_COMPONENT_MEMORY)
				//#endif
			#endif
			
			#define SANI_SEQUENCE_GRAMMAR_VERIFY_NO_CIRCULAR	//used for debugging (circular loops don't get generated by !SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS, or are generated much less often)
			#ifdef SANI_SEQUENCE_GRAMMAR_COMPONENT_GENERATE_VARIABLE_FIRST_COMPONENTS
				#define SANI_SEQUENCE_GRAMMAR_COMPONENT_SUPPORT_VARIABLE_FIRST_COMPONENTS	//SANI1j5a
				
				#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_DISABLE_MULTIPLE_INPUTS_IF_HAS_IDENTICAL_COMPONENTS	//SANI1k7a
				#ifdef SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_DISABLE_MULTIPLE_INPUTS_IF_HAS_IDENTICAL_COMPONENTS
					#define SANI_SEQUENCE_GRAMMAR_COMPONENT_IDENTIFY_VARIABLE_COMPONENTS_DISABLE_MULTIPLE_INPUTS_IF_HAS_IDENTICAL_COMPONENTS
				#endif
		
				#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_GENERATE_VARIABLE_FIRST_COMPONENTS	//SANI1k1b
				#ifdef SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_GENERATE_VARIABLE_FIRST_COMPONENTS
					
					#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_GENERATE_VARIABLE_COMPONENTS
																			
					#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_GENERATE_VARIABLE_FIRST_COMPONENTS_PREVENT_DUPLICATE_CONNECTIONS	//SANI1k14e
					
					//#ifdef SANI_SEQUENCE_PREVENT_INTRASENTENCE_MATCHING	//not yet defined
						//#define SANI_SEQUENCE_GRAMMAR_GENERATE_INCREMENTALLY_SECTIONED_PREVENT_INTRASENTENCE_MATCHING_SECTIONED_RESET_AT_END	//untested
						//#define SANI_SEQUENCE_GRAMMAR_GENERATE_ENSURE_ALL_NEURONS_IN_SUBGROUP_ARE_NOT_USED_BY_ANY_NEW_CANDIDATE	//disabled SANI1k13a

						#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_SUPPORT_VARIABLE_FIRST_COMPONENT_ALL_NEURONS_IN_LAST_COMPONENT_SUBGROUPS_ARE_UNIQUE		//SANI1k12a trial only	//enabled 1n6c
						#ifdef SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_SUPPORT_VARIABLE_FIRST_COMPONENT_ALL_NEURONS_IN_LAST_COMPONENT_SUBGROUPS_ARE_UNIQUE
							#define SANI_SEQUENCE_GRAMMAR_COMPONENT_IDENTIFY_VARIABLE_COMPONENTS_FIRST_COMPONENTS_ALL_NEURONS_IN_LAST_COMPONENT_SUBGROUPS_ARE_UNIQUE
						#endif
						#ifdef SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_GENERATE_VARIABLE_FIRST_COMPONENTS_FIRST_COMP_REQUIRE_SIZEABLE_SUBTREE
							#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_SUPPORT_VARIABLE_FIRST_COMPONENT_ALL_NEURONS_IN_FIRST_COMPONENT_SUBGROUPS_ARE_UNIQUE	//SANI1l15a	//SANI1k12a trial only
							#ifdef SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_SUPPORT_VARIABLE_FIRST_COMPONENT_ALL_NEURONS_IN_FIRST_COMPONENT_SUBGROUPS_ARE_UNIQUE
								#define SANI_SEQUENCE_GRAMMAR_COMPONENT_IDENTIFY_VARIABLE_COMPONENTS_FIRST_COMPONENTS_ALL_NEURONS_IN_FIRST_COMPONENT_SUBGROUPS_ARE_UNIQUE
							#endif
						#endif
						#ifdef SANI_SEQUENCE_PREVENT_INTRASENTENCE_MATCHING_HISTORY	//not yet defined
							//#define SANI_SEQUENCE_GRAMMAR_GENERATE_ENSURE_ALL_NEURONS_IN_SUBGROUP_DO_NOT_HAVE_CONNECTIONS_TO_ANY_NEW_CANDIDATE	//SANI1k10c	//disabled SANI1k12a	//not yet implemented for SANI_SEQUENCE_PREVENT_INTRASENTENCE_MATCHING_EFFICIENT
						#endif
					//#endif

					#define SANI_SEQUENCE_GRAMMAR_COMPONENT_GENERATE_VARIABLE_FIRST_COMPONENTS_PREFERENCE_THEM	//SANI1k3a	//this preferences merging existing groups over creating new groups

					//#define SANI_SEQUENCE_GRAMMAR_COMPONENT_GENERATE_VARIABLE_FIRST_COMPONENTS_PRELIM_TEST	//SANI1k3a+	//not yet complete - requires definition of function copyRuleGroupType
					
					#ifndef SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_GENERATE_VARIABLE_FIRST_COMPONENTS_FIRST_COMP_REQUIRE_SIZEABLE_SUBTREE
						#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_GENERATE_VARIABLE_FIRST_COMPONENTS_FIRST_COMP_REQUIRE_MATCHING_DEPTH	//SANI1k3a
						#ifdef SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_GENERATE_VARIABLE_FIRST_COMPONENTS_FIRST_COMP_REQUIRE_MATCHING_DEPTH
							#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_GENERATE_VARIABLE_COMPONENTS_X_COMP_REQUIRE_MATCHING_DEPTH
							#define SANI_SEQUENCE_GRAMMAR_RECORD_DEPTH	//SANI1k6b
							#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_GENERATE_VARIABLE_FIRST_COMPONENTS_FIRST_COMP_REQUIRE
						#endif
					#endif
										
					#ifdef SANI_SEQUENCE_GRAMMAR_ADD_NEW_NEURONS_TO_SYMMETRICAL_TREE
						#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_GENERATE_VARIABLE_FIRST_COMPONENTS_LAST_COMP_REQUIRE_SIZEABLE_SUBTREE	//SANI1k3a
					#endif
					#ifdef SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_GENERATE_VARIABLE_FIRST_COMPONENTS_LAST_COMP_REQUIRE_SIZEABLE_SUBTREE
						#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_GENERATE_VARIABLE_FIRST_COMPONENTS_LAST_COMP_REQUIRE_SIZEABLE_SUBTREE_MIN_NEURONS (2)
					#endif
						
					#ifndef SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_GENERATE_VARIABLE_COMPONENTS_X_COMP_REQUIRE_MATCHING_DEPTH
						//#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_GENERATE_VARIABLE_FIRST_COMPONENTS_PRUNE	//SANI1k6+
						#ifdef SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_GENERATE_VARIABLE_FIRST_COMPONENTS_PRUNE
							#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_GENERATE_VARIABLE_FIRST_COMPONENTS_OPTIONAL	//replicate pathway generation without supporting variable first components
						#endif
						//#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_GENERATE_VARIABLE_FIRST_COMPONENTS_RANDOMISE	//SANI1k3a
						#ifdef SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_GENERATE_VARIABLE_FIRST_COMPONENTS_RANDOMISE
							#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_GENERATE_VARIABLE_FIRST_COMPONENTS_RANDOMISE_PROB (0.5)	//probability of accepting variable 1st component (ie merge)
						#endif
					#endif

				#else
					#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_ENFORCE_FIRST_COMPONENT_NOT_VARIABLE	//SANI1k1b //merge not supported
					//#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_ENFORCE_FIRST_COMPONENT_NOT_MISSING	//SANI1k1a	//merge not supported		
				#endif
			#endif
			#ifdef SANI_SEQUENCE_GRAMMAR_COMPONENT_SUPPORT_VARIABLE_FIRST_COMPONENTS
				#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_SUPPORT_VARIABLE_COMPONENTS
			#endif
			
			#ifdef SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_SUPPORT_VARIABLE_COMPONENTS
				#define SANI_SEQUENCE_GRAMMAR_GENERATE_INCREMENTALLY_SECTIONED	//SANI1k9a	//only currently supported by SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS

				#ifdef SANI_SEQUENCE_GRAMMAR_ADD_NEW_NEURONS_TO_SYMMETRICAL_TREE
					#define SANI_ENFORCE_WORD_CONNECTIVITY_BETWEEN_PREVIOUS_ACTIVE_COMPONENTS_AND_NEWLY_ACTIVATED_COMPONENT_MEMORY	//SANI1k10a	//updated SANI1k13a	//activated SANI1k15h
				#endif
				#ifdef SANI_ENFORCE_WORD_CONNECTIVITY_BETWEEN_PREVIOUS_ACTIVE_COMPONENTS_AND_NEWLY_ACTIVATED_COMPONENT_MEMORY
					//#define SANI_ALLOW_MULTIPLE_ACTIVATIONS	//SANI1k11a	//disabled SANI1l7a
				#endif
					
				//#ifdef SANI_SEQUENCE_PREVENT_INTRASENTENCE_MATCHING	//not yet defined
					#define SANI_SEQUENCE_PREVENT_INTRASENTENCE_MATCHING_EFFICIENT	//SANI1k12a	//mandatory SANI1n7a (SANI_SEQUENCE_PREVENT_INTRASENTENCE_MATCHING_BASIC removed)
				//#endif

				#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_OPTIMISE_FOR_DIVERGENT_CONVERGENT_PATHWAYS	//SANI1k5a
			#endif
				
		#endif
	#endif
	
#endif


//#define SANI_DEBUG_DISABLE_1j_CODE
#ifndef SANI_DEBUG_DISABLE_1j_CODE

	//#define SANI_SEMANTICALLY_DETERMINED_DYNAMIC_CONNECTIONS	//SANI1j1a	//incomplete

	//#define SANI_PARSE_SIMULTANEOUS_SET_WORD_POSTYPE_INFERRED_DYNAMIC_OLD_BUG	//disabled SANI1j2aTEMP88

	//#define SANI_SEQUENCE_GRAMMAR	//SANI1j2a
	#ifdef SANI_SEQUENCE_GRAMMAR
		
		//untested variables (should all be disabled by default):
		//#define SANI_PROPAGATE_ALL_POS_VALUES_SIMULTANEOUSLY	//SANI1j4a	//untested
		
		#ifdef SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS
			#define SANI_PREVENT_RECORDING_TOP_LEVEL_NEURON_IF_RECORDING_MAX_COVERAGE_NEURON	//SANI1j5a	//enabled SANI1k10c
		#endif
		
		//#define SANI_SEQUENCE_GRAMMAR_COMPONENT_GENERATE_VARIABLE_FIRST_COMPONENTS	//SANI1j5a
		#ifdef SANI_SEQUENCE_GRAMMAR_COMPONENT_GENERATE_VARIABLE_FIRST_COMPONENTS
			#define SANI_SEQUENCE_GRAMMAR_COMPONENT_SUPPORT_OPTIONAL_AND_MULTIPLE_INPUTS	//reduces complexity (size) of generated network, but increases algorithm complexity (CHECKTHIS)
			//#define SANI_SEQUENCE_GRAMMAR_COMPONENT_DETECT_LOCAL_VARATION	//SANI1j3a	//untested
		#endif
		#ifndef SANI_SEQUENCE_GRAMMAR_COMPONENT_GENERATE_VARIABLE_FIRST_COMPONENTS
			//#define SANI_SEQUENCE_GRAMMAR_ORIG	//this shouldnt ever be necessary, but restores code to precise SANI1j4a functional state
		#endif
		
		//debug variables (should all be disabled by default):		
		//#define SANI_DEBUG_SEQUENCE_GRAMMAR_SINGLE_POS_PERMUTATION
		//#define SANI_DEBUG_SEQUENCE_GRAMMAR_MAX_POS_PERMUTATIONS
		//#ifdef SANI_DEBUG_SEQUENCE_GRAMMAR_MAX_POS_PERMUTATIONS
		//	#define SANI_DEBUG_SEQUENCE_GRAMMAR_MAX_POS_PERMUTATIONS_NUM (20)
		//#endif
		//#define SANI_DEBUG_SEQUENCE_GRAMMAR_TEST_VERIFICATION_AFTER_GENERATION	//requires inputText to include a duplication of all sentences halfway through file
			
		//#define SANI_DEBUG_SEQUENCE_GRAMMAR2
		#ifdef SANI_DEBUG_SEQUENCE_GRAMMAR2
			#define SANI_DEBUG_RULES_PRINT_PARSE_PROCESS_POS_TYPES
			#define SANI_DEBUG_SEQUENCE_GRAMMAR_TRACE
			#define SANI_DEBUG_SEQUENCE_GRAMMAR_BASIC
			#define SANI_DEBUG_SEQUENCE_GRAMMAR_WORDCONNECTIVITY_VERIFICATION
			
			#define SANI_DEBUG_PROPAGATE
			#define SANI_DEBUG_PROPAGATE_EXTRA3  //detailed debug
			#define SANI_DEBUG_PROPAGATE_EXTRA4
			//#define SANI_DEBUG_PROPAGATE_EXTRA2
		#endif
		//#define SANI_DEBUG_SEQUENCE_GRAMMAR	//temp
		#ifdef SANI_DEBUG_SEQUENCE_GRAMMAR
			#define SANI_DEBUG_RULES_PRINT_PARSE_PROCESS_POS_TYPES
			#define SANI_DEBUG_SEQUENCE_GRAMMAR_TRACE
			#define SANI_DEBUG_SEQUENCE_GRAMMAR_BASIC
			#define SANI_DEBUG_SEQUENCE_GRAMMAR_WORDCONNECTIVITY_VERIFICATION
			#define SANI_DEBUG_SEQUENCE_GRAMMAR_SPLIT
			//#define SANI_DEBUG_SEQUENCE_GRAMMAR_NEVER_SPLIT_GROUP_BETWEEN_TWO_IDENTICAL_COMPONENTS
			#define SANI_DEBUG_SEQUENCE_GRAMMAR_ENSURE_PROSPECTIVE_WORD_CONNECTIVITY
			//#define SANI_DEBUG_SEQUENCE_GRAMMAR_TEST_VERIFICATION_AFTER_GENERATION	//requires inputText to include a duplication of all sentences halfway through file
			//#define SANI_DEBUG_SEQUENCE_GRAMMAR_TEST_VERIFICATION_PROPAGATION_IN_OPPOSITE_DIRECTION	//temp test only	//FAIL@SANI1j2aTEMP134, OK@SANI1j2j
			//#define SANI_DEBUG_SEQUENCE_GRAMMAR_SINGLE_POS_PERMUTATION
			#define SANI_DEBUG_SEQUENCE_GRAMMAR_PRINT_GROUP_INDICES
			
			#define SANI_DEBUG_PROPAGATE
			#define SANI_DEBUG_SEQUENCE_GRAMMAR_WORDINDEX_VERIFICATION   //detailed debug
			#define SANI_DEBUG_PROPAGATE_EXTRA3  //detailed debug
			#define SANI_DEBUG_PROPAGATE_EXTRA4
			#define SANI_DEBUG_PROPAGATE_EXTRA2
		#endif
	
		#ifdef SANI_DEBUG_SEQUENCE_GRAMMAR_TEST_VERIFICATION_AFTER_GENERATION
			#define SANI_SEQUENCE_GRAMMAR_STORE_SENTENCE_INDEXING
		#endif
		
		//#define SANI_SEQUENCE_WORDCONNECTIVITY_VERIFICATION	//SANI1j5aTEMP53	//not required 	//should be activated for software verification
		//#define SANI_SEQUENCE_GRAMMAR_VERIFICATION	//not required	//should be activated for software verification	//can be disabled for specific debugging
		#define SANI_SIMPLE_WORD_POS_TYPE_INPUT_ONLY


		#define SANI_ANN_CENTRE_NEURONS
		#ifdef SANI_ANN_CENTRE_NEURONS
			#define SANI_ANN_CENTRE_NEURONS_X_AXIS
			#ifndef SANI_DEBUG_VISUAL_TRACE
				#define SANI_ANN_SEGREGATE_TOP_LAYER_NEURONS
			#endif
			#ifdef SANI_ANN_SEGREGATE_TOP_LAYER_NEURONS
				#define SANI_SEQUENCE_GRAMMAR_RECORD_TOP_LEVEL_NEURONS	//SANI1n5b
				#define SANI_ANN_SEGREGATE_TOP_LAYER_NEURONS_Y_SEPARATION (10)
			#endif
		#endif

		//algorithm tweaks:
		//#ifdef SANI_ENFORCE_WORD_CONNECTIVITY_BETWEEN_PREVIOUS_ACTIVE_COMPONENTS_AND_NEWLY_ACTIVATED_COMPONENT	//not yet defined
			#ifndef SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS
				#define SANI_SEQUENCE_GRAMMAR_FORCE_RESET_IF_NO_WORD_CONNECTIVITY_BETWEEN_PREVIOUS_ACTIVE_COMPONENTS_AND_NEWLY_ACTIVATED_COMPONENT	//SANI1j2bTEMP19	//mandatory //disabled SANI1k10b	//this test as currently implemented does not work
			#endif
			#ifndef SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_DISABLE_REDUNDANT_WORD_CONNECTIVITY_CHECKS
				#define SANI_SEQUENCE_GRAMMAR_ENSURE_PROSPECTIVE_WORD_CONNECTIVITY_BETWEEN_NEWLY_ACTIVATED_COMPONENT_AND_PREVIOUSLY_ACTIVATED_GROUP	//SANI1j2bTEMP21-24
			#endif
			#ifdef SANI_SEQUENCE_GRAMMAR_ENSURE_PROSPECTIVE_WORD_CONNECTIVITY_BETWEEN_NEWLY_ACTIVATED_COMPONENT_AND_PREVIOUSLY_ACTIVATED_GROUP
				//#define SANI_SEQUENCE_GRAMMAR_ENSURE_PROSPECTIVE_WORD_CONNECTIVITY_BETWEEN_NEWLY_ACTIVATED_COMPONENT_AND_PREVIOUSLY_ACTIVATED_GROUP_INST	//SANI1j5aTEMP56
				#define SANI_SEQUENCE_GRAMMAR_ENSURE_PROSPECTIVE_WORD_CONNECTIVITY_BETWEEN_NEWLY_ACTIVATED_COMPONENT_AND_PREVIOUSLY_ACTIVATED_GROUP_OPTIMISED	//SANI1j2c
				#ifdef SANI_SEQUENCE_GRAMMAR_ENSURE_PROSPECTIVE_WORD_CONNECTIVITY_BETWEEN_NEWLY_ACTIVATED_COMPONENT_AND_PREVIOUSLY_ACTIVATED_GROUP_OPTIMISED
					#define SANI_SEQUENCE_GRAMMAR_ENSURE_PROSPECTIVE_WORD_CONNECTIVITY_BETWEEN_NEWLY_ACTIVATED_COMPONENT_AND_PREVIOUSLY_ACTIVATED_GROUP_OPTIMISED2	//SANI1j2c
				#endif
			#endif
		//#endif
		#ifndef SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS
			#define SANI_SEQUENCE_GRAMMAR_NEVER_SPLIT_GROUP_BETWEEN_TWO_IDENTICAL_COMPONENTS	//added SANI1j2bTEMP8-TEMP9, updated SANI1j2bTEMP14-TEMP16	//this prevents algorithm issues involving repeated words (or sequences)
		#endif
		#ifndef SANI_SEQUENCE_GRAMMAR_NEVER_SPLIT_GROUP_BETWEEN_TWO_IDENTICAL_COMPONENTS
			//#define SANI_SEQUENCE_GRAMMAR_PREVENT_WRITE_IF_UPPER_NEURON_ALREADY_CONTAINS_WORD_INDEX_OF_EXISTING_COMPONENT	//added SANI1j2aTEMP145, removed SANI1j2aTEMP8
		#endif
		#define SANI_SEQUENCE_GRAMMAR_PREVENT_RESET_IF_NEXT_SEQUENCE_IS_SAME_AS_CURRENT_SEQUENCE	//SANI1j2aTEMP143
		#define SANI_SEQUENCE_GRAMMAR_PREVENT_RESET_IF_FIRST_INACTIVE_COMPONENT_GROUPREF_IS_SAME_AS_FUTURE_ACTIVE_COMPONENT_GROUPREF	//SANI1j2aTEMP126, updated SANI1j2bTEMP18
		#ifdef SANI_SEQUENCE_GRAMMAR_PREVENT_RESET_IF_FIRST_INACTIVE_COMPONENT_GROUPREF_IS_SAME_AS_FUTURE_ACTIVE_COMPONENT_GROUPREF
			#define SANI_SEQUENCE_GRAMMAR_PREVENT_RESET_IF_FIRST_INACTIVE_COMPONENT_GROUPREF_IS_SAME_AS_FUTURE_ACTIVE_COMPONENT_GROUPREF_RECURSIVE	//SANI1j2aTEMP129 (never used?)
		#endif
		
		#define SANI_SEQUENCE_GRAMMAR_WEIGHTS	//strengthen groups/componentConnections depending on usage
		#ifdef SANI_SEQUENCE_GRAMMAR_WEIGHTS
			#define SANI_SEQUENCE_GRAMMAR_WEIGHTS_PRINT_COLOURS	//SANI1j2j
		#endif
		
		//#ifndef SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_2
			#define SANI_SEQUENCE_PREVENT_INTRASENTENCE_MATCHING	//CHECKTHIS
			#ifdef SANI_SEQUENCE_PREVENT_INTRASENTENCE_MATCHING
				#ifdef SANI_SEQUENCE_GRAMMAR_COMPONENT_GENERATE_VARIABLE_FIRST_COMPONENTS
					#define SANI_SEQUENCE_PREVENT_INTRASENTENCE_MATCHING_HISTORY
					#ifndef SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS
						#define SANI_SEQUENCE_GRAMMAR_GENERATE_ENSURE_ALL_NEURONS_IN_SUBGROUP_ARE_NOT_USED_BY_ANY_NEW_CANDIDATE	//disabled SANI1k13a, conditionally activated SANI1k17b
					#endif
				#endif
			#endif
		//#endif
		
		#define SANI_SEQUENCE_GRAMMAR_PREVENT_TOP_LEVEL_NEURON_DUPLICATION
		#define SANI_ANN_DELAY_ANN_CONNECTIVITY_TILL_END
		
		#define SANI_SEQUENCE_GRAMMAR_SUPPORT_PARTIAL_SENTENCE_PROPAGATION
		#define SANI_SEQUENCE_GRAMMAR_PERFORM_AUTORESET_OF_ACTIVATIONS		
		
		//#define SANI_SEQUENCE_GRAMMAR_SUPPORT_OPTIONAL_COMPONENTS	//not supported as groups may be split in the future, preventing propagation algorithm from functioning properly (NB propagation algorithm does not support optional components at "end" [ie lastIndex] of group)
		
		#define SANI_SEQUENCE_GRAMMAR_GROUP_TYPE_NAME "sequenceGrammarAutoGeneratedGroups"
		#define SANI_SEQUENCE_GRAMMAR_GROUP_TYPE_REFERENCE_SET_TYPE (3) //GIA_POS_REL_TRANSLATOR_RULES_GROUPS_REFERENCE_SET_TYPE_SUBREFERENCESET "subReferenceSet"
		#define SANI_SEQUENCE_GRAMMAR_GROUP_NAME "sequenceGrammarAutoGeneratedGroup"
		#define SANI_SEQUENCE_GRAMMAR_NEURON_NAME "generated"
		
		//#define SANI_SEQUENCE_GRAMMAR_PRELIMTEST_GENERATE_CLASSIFICATION_NET_INPUT_DATASET	//depreciated @SANI1m3c //generates preliminary (non-functional) representation of sequence grammer network exclusively using ANNneuronClass rather than SANInodesGroupClass:ANNneuronClass
		#ifdef SANI_SEQUENCE_GRAMMAR_PRELIMTEST_GENERATE_CLASSIFICATION_NET_INPUT_DATASET
			/*
			#ifdef COMPILE_LRP_GENERATE_POS_TAGGER_DATABASE	//ie LRP_PREPROCESSOR_POS_TAGGER_GENERATE_DATABASE
				//output POS tag derivations from wikidump to file
				//assume compiled with COMPILE_LRP_WITH_ANN_GENERATE_POS_TAGGER_DATABASE
				#define SANI_SEQUENCE_GRAMMAR_PRELIMTEST_GENERATE_CLASSIFICATION_NET_INPUT_DATASET_VIA_PREPROCESSOR_POS_TAGGER_GENERATE_DATABASE
				#ifdef SANI_SEQUENCE_GRAMMAR_PRELIMTEST_GENERATE_CLASSIFICATION_NET_INPUT_DATASET_VIA_PREPROCESSOR_POS_TAGGER_GENERATE_DATABASE
					#define LRP_PREPROCESSOR_POS_TAGGER_GENERATE_DATABASE_RAW	//this is an adaption of LRP_PREPROCESSOR_POS_TAGGER_GENERATE_DATABASE to output entire sentence POS rather than that centred on a particular word
					//#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK_INTERNAL_CLASSIFICATION_NET	//uses these variables
				#endif
			#else
				//assume compiled with COMPILE_ANN+ANN_ALGORITHM_SANI_SEQUENCE_GRAMMAR_NETWORK
				#define SANI_SEQUENCE_GRAMMAR_PRELIMTEST_GENERATE_CLASSIFICATION_NET_ANN_DATAFILE_NAME "POStaggerOutputClassificationNetExperiencesDataFile.dat"
				#ifdef COMPILE_ANN
					#define GIA_LRP_FOLDER_DEFAULT "/source/source/LRPdata"	//from NLCIglobalDefs:NLCI_LRP_ROOT_FOLDER
					#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK_USE_ANN	//SANI1j2a
					#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK	//required for certain functions from LRPpreprocessorPOStaggerClass
					#define SANI_SEQUENCE_GRAMMAR_PRELIMTEST_GENERATE_CLASSIFICATION_NET_INPUT_DATASET_VIA_ANN
					#ifdef SANI_SEQUENCE_GRAMMAR_PRELIMTEST_GENERATE_CLASSIFICATION_NET_INPUT_DATASET_VIA_ANN
						#define SANI_SEQUENCE_GRAMMAR_PRELIMTEST_GENERATE_CLASSIFICATION_NET_INPUT_DATASET_VIA_ANN_EMULATE_EXACT_POS_TAGGER_DATABASE_OUTPUT	//relies on LRPpreprocessorPOStaggerClass::generateANNexperienceFromPOSambiguityInfoPermutation from COMPILE_LRP_GENERATE_POS_TAGGER_DATABASE rather than SANIpropagateCompactClass::propagateWordThroughNetworkIntro from SANI_SEQUENCE_GRAMMAR_INTEGRATED
					#endif
				#endif
			#endif
			#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK_INTERNAL_CLASSIFICATION_NET_TRAIN_EXPERIENCE_OUTPUT_VALUE_NOT_USED (0.0)
			*/
		#else
			//final version (non testing) 
			#ifdef COMPILE_LRP_GENERATE_POS_TAGGER_DATABASE	//ie LRP_PREPROCESSOR_POS_TAGGER_GENERATE_DATABASE
				//execute SANIpropagateCompactGenerate directly/immediately on wikidump POS tag derivations
				//assume compiled with COMPILE_LRP_WITH_ANN_GENERATE_POS_TAGGER_DATABASE
				#define LRP_PREPROCESSOR_POS_TAGGER_GENERATE_NEURAL_NETWORK_SEQUENCE_GRAMMAR		
				#ifdef LRP_PREPROCESSOR_POS_TAGGER_GENERATE_NEURAL_NETWORK_SEQUENCE_GRAMMAR
					#define LRP_PREPROCESSOR_POS_TAGGER_GENERATE_DATABASE_RAW	//this is an adaption of LRP_PREPROCESSOR_POS_TAGGER_GENERATE_DATABASE to output entire sentence POS rather than that centred on a particular word
					//#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK_INTERNAL_CLASSIFICATION_NET	//uses these variables
					//#ifdef LRP_PREPROCESSOR_POS_TAGGER_DATABASE_FEED_ALL_PERMUTATIONS_INDIVIDUALLY_ONLY_TRAIN_UNAMBIGUOUS_PERMUTATIONS	//not yet defined	//recommended/required for train efficiency	//CHECKTHIS is compatible with LRP_PREPROCESSOR_POS_TAGGER_GENERATE_NEURAL_NETWORK_SEQUENCE_GRAMMAR
						//#define LRP_PREPROCESSOR_POS_TAGGER_GENERATE_NEURAL_NETWORK_SEQUENCE_GRAMMAR_ONLY_TRAIN_UNAMBIGUOUS_PERMUTATIONS	//disabled SANI1k7a		
					//#endif
					#define LRP_PREPROCESSOR_POS_TAGGER_GENERATE_NEURAL_NETWORK_SEQUENCE_GRAMMAR_PRINT_SENTENCES
					#define LRP_PREPROCESSOR_POS_TAGGER_GENERATE_NEURAL_NETWORK_SEQUENCE_GRAMMAR_SENTENCE_MIN_WORDS (2)
				#endif
			#else
				//assume compiled with COMPILE_GIA or COMPILE_GIA_WITH_ANN
					//ensure to compile GIAwithANN (activates USE_ANN: SANI_ANN) to print network
				#define SANI_SEQUENCE_GRAMMAR_INTEGRATED
					//note supports SANI_PARSE/SANI_PARSE_SAVE_PARSE_TREE
					//note doesn't support SANI_PARSE_SIMULTANEOUS/SANI_PARSE_PERFORMANCE/semantic network generation (GIAtranslator.parseNLPparserFileAndCreateSemanticNetworkBasedUponDependencyParsedSentences)
			#endif
		#endif	
		
		//see SANIpropagateCompactClass::propagateWordThroughNetworkIntro: GIA_POS_REL_TRANSLATOR_RULES_TREAT_UNKNOWN_POSTYPES_AS_WILDCARDS is not supported, GIA_POS_REL_TRANSLATOR_RULES_TREAT_UNKNOWN_POSTYPES_AS_NOUNS is required
		
		//#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_ORIG
		#ifdef SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_ORIG
			//#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_2
			#ifdef SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_2
				#define SANI_SEQUENCE_GRAMMAR_MAX_NUMBER_COMPONENTS (2)	//this prevents the need to split neuronal components (biological feasibility)
				//#define SANI_SEQUENCE_GRAMMAR_LIMIT_NUM_COMPONENTS_2_ADD_ALL_PERMUTATIONS	//add all 2-tuples in sequence (ie overlapping; start odd/0 and start even/1), else add first available/consecutive 2-tuples in sequence (start odd/0 only)
			#else
				#define SANI_SEQUENCE_GRAMMAR_MAX_NUMBER_COMPONENTS (2)	//try 3, 4 etc
			#endif
		#endif
		#define SANI_SEQUENCE_GRAMMAR_REQUIRE_NUM_COMPONENTS
		#ifdef SANI_SEQUENCE_GRAMMAR_REQUIRE_NUM_COMPONENTS
			//#define SANI_SEQUENCE_GRAMMAR_REQUIRE_NUM_COMPONENTS_ENFORCE_DURING_SPLIT_OLD	//SANI1j2f
			#define SANI_SEQUENCE_GRAMMAR_REQUIRE_NUM_COMPONENTS_ENFORCE_DURING_FIRST_HIDDEN_LAYER_GENERATION	//SANI1j2f	//requires SANI_ANN_DELAY_ANN_CONNECTIVITY_TILL_END
			#define SANI_SEQUENCE_GRAMMAR_MIN_NUM_COMPONENTS (2)	//each neuron has to have at least 2 components
		#endif
		//#define SANI_SEQUENCE_GRAMMAR_MAX_NUMBER_LAYERS (200)	//adjust //~=LRP_PREPROCESSOR_POS_TAGGER_GENERATE_DATABASE_RAW_SENTENCE_MAX_NUM_WORDS
		

		#define SANI_COMPACT
		#ifdef SANI_COMPACT

			#define SANI_LIGHT_NEW

			#define SANI_REPLICATE_TOP_LEVEL_PARSE_TREE
			#ifdef SANI_REPLICATE_TOP_LEVEL_PARSE_TREE
				#define SANI_DONT_SET_NEURON_TRACED	//SANI1g11o	//experimental
				#define SANI_FREE_MEMORY	//SANI1g11p
			#endif
						
			#define SANI_TAKE_LAST_SUCCESSFUL_PARSE_LIMIT_ITERATIONS_PREFERENCE_WEIGHT_BASE
			#ifdef SANI_TAKE_LAST_SUCCESSFUL_PARSE_LIMIT_ITERATIONS_PREFERENCE_WEIGHT_BASE
				#define SANI_TAKE_LAST_SUCCESSFUL_PARSE_LIMIT_ITERATIONS_PREFERENCE_WEIGHT
				#ifdef SANI_TAKE_LAST_SUCCESSFUL_PARSE_LIMIT_ITERATIONS_PREFERENCE_WEIGHT
					#define SANI_TAKE_LAST_SUCCESSFUL_PARSE_LIMIT_ITERATIONS_PREFERENCE_WEIGHT_SUM
				#endif
				#define SANI_TAKE_LAST_SUCCESSFUL_PARSE_LIMIT_ITERATIONS_PREFERENCE_WEIGHT_DYNAMIC
			#endif

			#define SANI_RESET_COMPONENT_NEURONCOMPONENTCONNECTIONACTIVEWORDRECORD
			
			#define SANI_ENFORCE_WORD_CONNECTIVITY
			#ifdef SANI_ENFORCE_WORD_CONNECTIVITY
				#define SANI_ENFORCE_WORD_CONNECTIVITY_BETWEEN_PREVIOUS_ACTIVE_COMPONENTS_AND_NEWLY_ACTIVATED_COMPONENT
				#ifdef SANI_SEQUENCE_WORDCONNECTIVITY_VERIFICATION
					#define SANI_ENFORCE_WORD_CONNECTIVITY_POSHOC
					#ifdef SANI_ENFORCE_WORD_CONNECTIVITY_POSHOC
						#define SANI_ENFORCE_WORD_CONNECTIVITY_POSHOC_STRICT
						#ifdef SANI_ENFORCE_WORD_CONNECTIVITY_POSHOC_STRICT
							#define SANI_ENFORCE_WORD_CONNECTIVITY_POSHOC_STRICT_MUTUALLY_EXCLUSIVE
						#endif
					#endif
				#endif
			#endif
			#ifndef SANI_FORWARD_DIRECTION
				#define SANI_REVERSE_DIRECTION	//mandatory //required to support recursion (parse sentences from right to left); eg (Tom said that (Mary said))
			#endif
			
			#define SANI_BIO_DO_NOT_RELY_ON_PARSE_TREE_MEMORY	//SANI1h2a	//assume cannot backprop through parseTreeGroupNeuralNet
			#ifdef SANI_BIO_DO_NOT_RELY_ON_PARSE_TREE_MEMORY
				#define SANI_BIO_WEAK0	//requires lastParseComponent->parseTreeGroupRef
				#define SANI_BIO_WEAK1	//requires previousParseComponent->parseTreeGroupRef
				//#define SANI_BIO_WEAK2	//store component's->parseTreeGroupRef for 1 layer
				//#define SANI_BIO_WEAK3	//can backprop through groupNeuralNet but not parseTreeGroupNeuralNet
				
				#ifndef SANI_SEQUENCE_WORDCONNECTIVITY_VERIFICATION
					#define SANI_PARSE_PERFORMANCE_BIO	//SANI1i1a
				#endif
				//#ifdef SANI_PARSE_PERFORMANCE_BIO
					#ifdef SANI_BIO_WEAK0	//ie SANI_BIO_DO_NOT_RELY_ON_PARSE_TREE_MEMORY_WEAK
						#ifdef SANI_BIO_WEAK1
							//#ifdef SANI_TAKE_LAST_SUCCESSFUL_PARSE_LIMIT_ITERATIONS_PREFERENCE_WEIGHT_DYNAMIC	//not yet defined
								#define SANI_TAKE_LAST_SUCCESSFUL_PARSE_LIMIT_ITERATIONS_PREFERENCE_WEIGHT_DYNAMIC_BIO	//SANI1i1a
								#ifdef SANI_TAKE_LAST_SUCCESSFUL_PARSE_LIMIT_ITERATIONS_PREFERENCE_WEIGHT_DYNAMIC_BIO
									#define SANI_PARSE_PERFORMANCE_WEIGHT_BIO	//SANI1i1a
								#endif
							//#endif
						#endif
					#endif
				//#endif
			#endif
			
		#endif		
	#endif
	
#endif


#ifdef COMPILE_LRP_GENERATE_POS_TAGGER_DATABASE
	#ifdef SANI_SEQUENCE_GRAMMAR
	#else
		#define COMPILE_LRP_GENERATE_POS_TAGGER_DATABASE_ORIG	//dupliate definition required for SANIglobalDefs.hpp;
	#endif
#endif
		

//#define SANI_DEBUG_DISABLE_1i_CODE
#ifndef SANI_DEBUG_DISABLE_1i_CODE
	//light optimised debug only;
	//#define SANI_DEBUG_PRINT_FINAL
	//#define SANI_DEBUG_PRINT_FINAL2

	#ifdef SANI_FORWARD		
		//#ifdef SANI_PARSE	//not yet defined
			
			//#ifdef SANI_REMOVE_LAST_OPTIONAL_COMPONENTS	//not yet defined
				#define SANI_REMOVE_LAST_OPTIONAL_COMPONENTS_OR_OPTIONAL_REPEAT	//3i3b
			//#endif
			
			#ifndef SANI_SEQUENCE_GRAMMAR
				#define SANI_LIGHT_OPTIMISED_PRELIM	//temp var for debug; must be set if SANI_LIGHT_OPTIMISED is set
			#endif
			//#ifdef SANI_LIGHT_OPTIMISED	//not yet defined
			#ifdef SANI_LIGHT_OPTIMISED_PRELIM
				#define SANI_BIO_DO_NOT_RELY_ON_PARSE_TREE_MEMORY	//SANI1h2a	//assume cannot backprop through parseTreeGroupNeuralNet
				#ifdef SANI_BIO_DO_NOT_RELY_ON_PARSE_TREE_MEMORY
					#define SANI_BIO_WEAK0	//requires lastParseComponent->parseTreeGroupRef
					#define SANI_BIO_WEAK1	//requires previousParseComponent->parseTreeGroupRef
					//#define SANI_BIO_WEAK2	//store component's->parseTreeGroupRef for 1 layer
					//#define SANI_BIO_WEAK3	//can backprop through groupNeuralNet but not parseTreeGroupNeuralNet
					#ifdef SANI_BIO_WEAK0
						#define SANI_BIO_DO_NOT_RELY_ON_PARSE_TREE_MEMORY_WEAK	//SANI1h2a		//not properly bio compatible (strict bio can't backprop/get info from lower level neurons) - when removing lastest component; recalculate parent parseTreeTotalWeight based on parseTreeGroup latestComponent->parseTreeGroupRef parseTreeTotalWeight value
					#endif
					#ifdef SANI_BIO_WEAK1
						#define SANI_ENFORCE_WORD_CONNECTIVITY_POSHOC_STRICT_MUTUALLY_EXCLUSIVE_BIO	//SANI1i1a
					#endif
					//not yet coded;
					//#ifdef SANI_BIO_WEAK2
					//	#define SANI_BIO_DO_NOT_RELY_ON_PARSE_TREE_MEMORY_WEAK2	 //not properly bio compatible (can't backprop/get info from lower level neurons) - when removing lastest component; recalculate parent parseTreeMaxWeight/parseTreeMinWeight based on all parseTreeGroup component's->parseTreeGroupRef parseTreeMaxWeight/parseTreeMinWeight values
					//#endif

					#define SANI_PARSE_PERFORMANCE_BIO	//SANI1i1a
					#ifdef SANI_PARSE_PERFORMANCE_BIO
						#ifdef SANI_BIO_WEAK0	//ie SANI_BIO_DO_NOT_RELY_ON_PARSE_TREE_MEMORY_WEAK
							#ifdef SANI_BIO_WEAK1
								//#ifdef SANI_TAKE_LAST_SUCCESSFUL_PARSE_LIMIT_ITERATIONS_PREFERENCE_WEIGHT_DYNAMIC	//not yet defined
									#define SANI_TAKE_LAST_SUCCESSFUL_PARSE_LIMIT_ITERATIONS_PREFERENCE_WEIGHT_DYNAMIC_BIO	//SANI1i1a
									#ifdef SANI_TAKE_LAST_SUCCESSFUL_PARSE_LIMIT_ITERATIONS_PREFERENCE_WEIGHT_DYNAMIC_BIO
										#define SANI_PARSE_PERFORMANCE_WEIGHT_BIO	//SANI1i1a
									#endif
								//#endif
							#endif
						#endif
					#endif


					//TODO: create a SANI_VERIFY_OWNER_GROUP_DOESNT_CONTAIN_NEWLY_ACTIVATED_COMPONENT_IN_ITS_PARSE_TREE_BIO method


					//TODO: create a SANI_SOLIDIFY_BIO method that works
					#ifdef SANI_BIO_WEAK1
						//#define SANI_SOLIDIFY_BIO_WEAK1	//SANI1i1a	//doesnt work
					#endif
					#ifdef SANI_BIO_WEAK3
						//define SANI_SOLIDIFY_BIO_WEAK3	//not yet coded	
					#endif
				#endif
			
				#define SANI_PARSE_SIMULTANEOUS	//SANI1i1a	//optional	//equivalent to old <SANI1g1i !SANI_PARSE_SEPARATE
				
				#ifdef SANI_PARSE_SIMULTANEOUS
					#define SANI_PARSE_SIMULTANEOUS_SET_WORD_POSTYPE_INFERRED_DYNAMIC
					#ifdef SANI_PARSE_SIMULTANEOUS_SET_WORD_POSTYPE_INFERRED_DYNAMIC
						#define SANI_PARSE_SIMULTANEOUS_SET_WORD_POSTYPE_INFERRED_DYNAMIC_OPTIMISED	//same speed as !SANI_PARSE_SIMULTANEOUS	//save optimum paths for every sentence once, and use this trace multiple times during GIA advanced referencing
						#ifndef SANI_PARSE_SIMULTANEOUS_SET_WORD_POSTYPE_INFERRED_DYNAMIC_OPTIMISED
							#define SANI_PARSE_SIMULTANEOUS_SET_WORD_POSTYPE_INFERRED_DYNAMIC_UNOPTIMISED	//4x slower than !SANI_PARSE_SIMULTANEOUS	//unfinished (not yet implemented for USE_NLC:GIA_POS_REL_TRANSLATOR_RULES_PARSE_ISOLATED_SUBREFERENCE_SETS)
							#ifdef SANI_PARSE_SIMULTANEOUS_SET_WORD_POSTYPE_INFERRED_DYNAMIC_UNOPTIMISED
								//#define SANI_PARSE_SIMULTANEOUS_SET_WORD_POSTYPE_INFERRED_DYNAMIC_ONLY_PEFORM_PRELIM_PROPAGATION_IF_ADVANCED_REFERENCING
								#ifdef SANI_PARSE_SIMULTANEOUS_SET_WORD_POSTYPE_INFERRED_DYNAMIC_ONLY_PEFORM_PRELIM_PROPAGATION_IF_ADVANCED_REFERENCING
									#define SANI_PARSE_SIMULTANEOUS_SET_WORD_POSTYPE_INFERRED_DYNAMIC_OLD
								#endif		
							#endif
						#endif		
						#define SANI_PARSE_SIMULTANEOUS_SET_WORD_POSTYPE_INFERRED_DYNAMIC_STREAMLINED	//mandatory
					#endif
					#define SANI_PARSE_SIMULTANEOUS_DELETE_INCOMPLETE_PATHS_SEMANTIC_RELATIONS	//SANI1i1a
					#define SANI_PARSER	//SANI1g1c->SANI1g1h, SANI1i1a
					#ifdef SANI_PARSER
						#define SANI_PARSE_SIMULTANEOUS_BIO	//SANI1i1a	//currently mandatory (non bio implementation is not robust)	//parseTreeGroups are logically reducible to groups, parseTreeComponents are logically reducible to components [they just specify the parse relevant properties of the group/components]
						//#define SANI_PARSE_SIMULTANEOUS_BIO_LIMIT_GENERATION_OF_SEM_NET_FROM_INCOMPLETE_PATHS	//trial SANI1i1aTEMP35
					#endif
				#endif
			#endif
			//#endif


			#define SANI_PARSE_PERFORMANCE	//SANI1i1a	//equivalent to old <SANI1g1i SANI_PARSE	//required for performance calculations only (doesnt assume parse tree is generated or saved)
			#ifdef SANI_PARSE_SIMULTANEOUS
				#ifndef SANI_PARSE_PERFORMANCE_BIO
					#define SANI_PARSE_GENERATE_PARSE_TREE
				#endif
				#ifndef SANI_PARSE_SIMULTANEOUS_BIO
					#define SANI_PARSE_GENERATE_PARSE_TREE
				#endif
				#ifdef SANI_BIO_DO_NOT_RELY_ON_PARSE_TREE_MEMORY_WEAK
					#define SANI_PARSE_GENERATE_PARSE_TREE	//requires previousParseComponent->parseTreeGroupRef
				#endif
				#ifdef SANI_PARSE_SIMULTANEOUS_DELETE_INCOMPLETE_PATHS_SEMANTIC_RELATIONS
					#define SANI_PARSE_GENERATE_PARSE_TREE
					#define SANI_PARSE_SAVE_PARSE_TREE	//this is required to set optimumPaths via backprop of final generated parse tree
				#endif
			#else
				#define SANI_PARSE_GENERATE_PARSE_TREE
				#ifdef SANI_PARSE_GENERATE_PARSE_TREE
					#define SANI_PARSE_SAVE_PARSE_TREE
				#endif
			#endif
		//#endif
	#else
		#define SANI_PARSE_GENERATE_PARSE_TREE
	#endif
#endif

//#define SANI_DEBUG_DISABLE_1h_CODE
#ifndef SANI_DEBUG_DISABLE_1h_CODE
	
	#ifdef SANI_FORWARD			
		#ifdef USE_ANN
			#ifndef COMPILE_LRP_GENERATE_POS_TAGGER_DATABASE_ORIG
				#define SANI_ANN	//SANI1h3a
			#endif
			#ifdef SANI_ANN
			
				#define SANI_NEURAL_NETWORK	//SANI1m7a

				//#ifdef GIA_NEURAL_NETWORK_SYMBOLIC_CORE	//not yet defined;
					#define GIA_NEURAL_NETWORK_IGNORE_DISABLED_ENTITIES	//SANI1h4c
					#define GIA_NEURAL_NETWORK_SYMBOLIC_CORE_SEPARATE_INSTANCES_BY_SENTENCE_INDEX	//SANI1h4b //do not use z dimension to display net
					#ifdef GIA_NEURAL_NETWORK_SYMBOLIC_CORE_SEPARATE_INSTANCES_BY_SENTENCE_INDEX
						#define GIA_NEURAL_NETWORK_SYMBOLIC_CORE_SEPARATE_INSTANCES_BY_SENTENCE_INDEX_SENTENCE_YPOS_SPACING (1)
						//#define GIA_NEURAL_NETWORK_SYMBOLIC_CORE_SEPARATE_INSTANCES_BY_SENTENCE_INDEX_SENTENCE_YPOS_OFFSET (10)	//~= max number of words per sentence/2	//now is dynamic
					#endif
					#define GIA_NEURAL_NETWORK_SYMBOLIC_CORE_USE_ENTITY_INDEX_RATHER_THAN_ARTIFICIAL_LAYER	//SANI1h4c
				//#endif

				#define SANI_ANN_CALCULATE_BOUNDING_BOXES	//SANI1h3a	//reduces display x (width) - more compact	
				#ifdef SANI_ANN_CALCULATE_BOUNDING_BOXES
					#define SANI_ANN_CALCULATE_BOUNDING_BOXES2	//SANI1h3b	//optional; no change in output
				#endif
				#define SANI_ANN_SUPPORT_RECURSION	//where recursion prevents optimisation of display y coordinate of groupType, use its position within the xml file

				//#define SANI_ANN_ADD_LAYER_FOR_EVERY_GROUP_TYPE	//SANI1g1a	//optional - not currently used

				#ifdef SANI_ANN_CALCULATE_BOUNDING_BOXES
					#define SANI_ANN_GROUPTYPE_ARTIFICIAL_SPACING_X (5)
				#else
					#define SANI_ANN_GROUPTYPE_ARTIFICIAL_SPACING_X (100)	//max number of neurons per artificial groupType
				#endif
				#define SANI_ANN_GROUPTYPE_ARTIFICIAL_SPACING_Y (5)	//max number of layers in artificial groupType
				#ifdef SANI_ANN_CALCULATE_BOUNDING_BOXES
					#define SANI_ANN_GROUPTYPE_SPACING_X (5)
				#else
					#define SANI_ANN_GROUPTYPE_SPACING_X (20)	//max number of neurons per groupType
				#endif
				#define SANI_ANN_GROUPTYPE_SPACING_Y (2)	//max number of layers in groupType
				#define SANI_ANN_GROUP_ARTIFICIAL_SPACING_X (1)
				#define SANI_ANN_GROUP_ARTIFICIAL_SPACING_Y (1)
				#define SANI_ANN_GROUP_SPACING_X (1)
				#ifdef SANI_DEBUG_VISUAL_TRACE
					#define SANI_ANN_GROUP_SPACING_Y (50)
				#else
					#define SANI_ANN_GROUP_SPACING_Y (1)
				#endif

				#define SANI_ANN_GROUPTYPE_ARTIFICIAL_INPUT_POSITION_X (0)
				#define SANI_ANN_GROUPTYPE_ARTIFICIAL_INPUT_POSITION_Y (0)
				#define SANI_ANN_GROUPTYPE_ARTIFICIAL_INPUT_POSITION_X_WORDPOSTYPE (0)
				#define SANI_ANN_GROUPTYPE_ARTIFICIAL_INPUT_POSITION_X_EXPLICITWORD (1)
				#define SANI_ANN_GROUPTYPE_ARTIFICIAL_INPUT_POSITION_X_EXPLICITTOKENSLAYER (2)
				#define SANI_ANN_GROUP_ARTIFICIAL_INPUT_POSITION_Y_WORDPOSTYPE (0) 
				#define SANI_ANN_GROUP_ARTIFICIAL_INPUT_POSITION_Y_WORDPOSTYPE_NOUN_VERB_VARIANTS (1)  				    
				#define SANI_ANN_GROUP_ARTIFICIAL_INPUT_POSITION_Y_EXPLICITWORD (0)											    
				#define SANI_ANN_GROUP_ARTIFICIAL_INPUT_POSITION_Y_EXPLICITTOKENSLAYER (0)			    
				#define SANI_ANN_GROUP_ARTIFICIAL_INPUT_POSITION_Y_EXPLICITTOKENSLAYER_LAYER_CLASS_TYPE_INSTANCE (0)
				#define SANI_ANN_GROUP_ARTIFICIAL_INPUT_POSITION_Y_EXPLICITTOKENSLAYER_LAYER_CLASS_TYPE (1)
				#define SANI_ANN_GROUP_ARTIFICIAL_INPUT_POSITION_Y_EXPLICITTOKENSLAYER_LAYER_CLASS (2)
				#define SANI_ANN_GROUP_ARTIFICIAL_INPUT_POSITION_Y_EXPLICITTOKENSLAYER_LAYER (3)
				#define SANI_ANN_SUBGROUP_ARTIFICIAL_SPACING_X (3)

				#define SANI_ANN_GROUPTYPE_INPUT_POSITION_X (0)
				#define SANI_ANN_GROUPTYPE_INPUT_POSITION_Y (SANI_ANN_GROUPTYPE_ARTIFICIAL_SPACING_Y)
			#endif
		#endif
	#endif
#endif


//#define SANI_DEBUG_DISABLE_1g_CODE
#ifndef SANI_DEBUG_DISABLE_1g_CODE
	
	#define SANI_COMPONENT_INDEX_FIRST (0)	//3g6a
	#ifdef SANI_FORWARD
	
		//light optimised debug only;		
		//#define SANI_DEBUG_PROPAGATE_EXTRA9

		//light unoptimised debug only;
		//#define SANI_DEBUG_PROPAGATE_EXTRA8
		//#define SANI_DEBUG_PROPAGATE_EXTRA7
		//#define SANI_DEBUG_PROPAGATE_EXTRA6
		
		//#define SANI_DEBUG_PROPAGATE_EXTRA5
		
		//common debug;
		//#define SANI_DEBUG_PROPAGATE_EXTRA4
			//#define SANI_DEBUG_PROPAGATE_EXTRA3
			//#define SANI_DEBUG_PROPAGATE_EXTRA2
			//#define SANI_DEBUG_PROPAGATE_EXTRA
		//#define SANI_DEBUG_PROPAGATE
			//#define SANI_DEBUG_CREATE
		//#define SANI_DEBUG_RULES_PRINT_PARSE_PROCESS_POS_TYPES
		

		#define SANI_WORD_INDEX_W_TO_ENTITY_INDEX_OFFSET (1)	//w starts at 0, sentence entityIndex starts at 1
		
		#define GIA_POS_REL_TRANSLATOR_RULES_DEFINE_GROUP_TYPE_BACKUP_AT_START	//SANI1g1b
		
		#define SANI_REPEAT_SEQUENCES_ENFORCE_CONSECUTIVE_STRING_COMPONENTS	//SANI1g1h

		#ifndef SANI_SIMPLE_WORD_POS_TYPE_INPUT_ONLY
			#define SANI_CREATE_NEURONS_FOR_NOUN_VERB_VARIANTS	//SANI1g1a
		#endif
		
		//#ifdef GIA_POS_REL_TRANSLATOR_RULES_CODE_GROUP_PREVIOUS_WORD_POS_TYPE //not yet defined
			#define SANI_PREVIOUS_WORD_POS_TYPE_CHECKS	//SANI1g1a	//SANI1g1aTEMP61
		//endif
			
		#define SANI_PARSE	//SANI1g1c
		#ifdef SANI_PARSE_PERFORMANCE
			#define SANI_PARSE_PERFORMANCE_RECORD_PERFORMANCE	//SANI1g1cTEMP14
			#ifdef SANI_PARSE_PERFORMANCE_RECORD_PERFORMANCE
				//#define SANI_PARSE_PERFORMANCE_RECORD_PERFORMANCE_METHOD_OLD_INCREMENT_FOR_EVERY_GROUP_REF_RECURSE
			#endif	
		#endif
		#ifdef SANI_PARSE_GENERATE_PARSE_TREE
			//#define SANI_PARSE_BASIC	//depreciated: modify and execute GIAposRelTranslatorParserClass::generateSemanticRelationsFromTxtRelations rather than adapting this code for SANI
		#endif
		
		/*//redundant (see GIAglobalDefs.hpp);
		#ifndef GIA_POS_REL_TRANSLATOR_RULES_ITERATE_OVER_UNAMBIGUOUS_POS_PERMUTATIONS_AT_START_DISABLE
			#ifndef SANI_PROPAGATE_ALL_POS_VALUES_SIMULTANEOUSLY
				#define GIA_POS_REL_TRANSLATOR_RULES_ITERATE_OVER_UNAMBIGUOUS_POS_PERMUTATIONS_AT_START	//SANI1g1aTEMP47	//SANI_PARSE does not currently robustly support GIA_POS_REL_TRANSLATOR_RULES_ITERATE_OVER_UNAMBIGUOUS_POS_PERMUTATIONS_AT_START
			#endif
		#endif
		*/
		
		#ifndef SANI_COMPACT
			//#define SANI_HEAVY	//SANI1g6-9
			#ifdef SANI_HEAVY
				//heavy: maintain multiple instances of the neural network in memory

				//#define SANI_ENFORCE_STRICT_ITERATION_INDICES	//created and disabled SANI1g9c

				#define SANI_SAVE_MEMORY_GROUPS	//SANI1g6a

				#define SANI_HEAVY_OPTIMISED	//SANI1g8-9
				#ifdef SANI_HEAVY_OPTIMISED

					#define SANI_REMOVE_LAST_OPTIONAL_COMPONENTS	//optional: does not simplify algorithm

					#define SANI_TAKE_LAST_SUCCESSFUL_PARSE	//SANI1g8h	//required to emulation !SANI?
					#ifdef SANI_TAKE_LAST_SUCCESSFUL_PARSE
						#define SANI_TAKE_LAST_SUCCESSFUL_PARSE_LIMIT_ITERATIONS	
						#ifdef SANI_TAKE_LAST_SUCCESSFUL_PARSE_LIMIT_ITERATIONS
							//#ifdef USE_NLC	//remove this requirement in future (after GIA auto testing recompleted)
								#define SANI_TAKE_LAST_SUCCESSFUL_PARSE_LIMIT_ITERATIONS_PREFERENCE_WEIGHT_BASE
								#ifdef SANI_TAKE_LAST_SUCCESSFUL_PARSE_LIMIT_ITERATIONS_PREFERENCE_WEIGHT_BASE
									#define SANI_TAKE_LAST_SUCCESSFUL_PARSE_LIMIT_ITERATIONS_PREFERENCE_WEIGHT	//SANI1g9c
									#ifdef SANI_TAKE_LAST_SUCCESSFUL_PARSE_LIMIT_ITERATIONS_PREFERENCE_WEIGHT
										#define SANI_TAKE_LAST_SUCCESSFUL_PARSE_LIMIT_ITERATIONS_PREFERENCE_WEIGHT_SUM //3g10a	//requires testing
									#endif
								#endif
								#define SANI_TAKE_LAST_SUCCESSFUL_PARSE_LIMIT_ITERATIONS_WEAK			//SANI1g9b
								#ifdef SANI_TAKE_LAST_SUCCESSFUL_PARSE_LIMIT_ITERATIONS_WEAK
									#define SANI_TAKE_LAST_SUCCESSFUL_PARSE_LIMIT_ITERATIONS_WEAK_OFFSET (1)
								#endif
							//#endif
						#endif
					#endif

					#define SANI_ENFORCE_WORD_CONNECTIVITY	//SANI1g8aTEMP51
					#define SANI_MAX_ITERATIONS (9)
					#define SANI_EFFICIENCY_STORE_POINT_ARRAY_IN_BASE_GROUP	//SANI1g8aTEMP28	

				#else
					#define SANI_HEAVY_UNOPTIMISED	//SANI1g6-7

					//#define SANI_ENFORCE_WORD_CONNECTIVITY_POSHOC_STRICT_OLD	//why was this never defined?

					#define SANI_REMOVE_LAST_OPTIONAL_COMPONENTS	//optional: significantly simplifies algorithm

					#ifndef SANI_REMOVE_LAST_OPTIONAL_COMPONENTS
						#define SANI_SUPPORT_FUZZY_LAST_COMPONENTS
						#ifdef SANI_SUPPORT_FUZZY_LAST_COMPONENTS
							#define SANI_SUPPORT_FUZZY_LAST_COMPONENTS_METHOD2	//SANI1g6aTEMP54	//requires SANI_ENFORCE_WORD_CONNECTIVITY_BETWEEN_PREVIOUS_ACTIVE_COMPONENTS_AND_NEWLY_ACTIVATED_COMPONENT
							//#define SANI_SUPPORT_FUZZY_LAST_COMPONENTS_METHOD1	//SANI1g6a, disabled SANI1g6aTEMP54
							#ifdef SANI_SUPPORT_FUZZY_LAST_COMPONENTS_METHOD1
								//#define SANI_SUPPORT_FUZZY_LAST_COMPONENTS_EFFICIENT	//SANI1g6aTEMP28, disabled SANI1g6aTEMP53 until debugged
							#endif
						#endif
					#endif

					#define SANI_SUPPORT_RECURSION	//SANI1g6a	//this is now mandatory (regardless of recursion, because group reset has been disabled)

					#define SANI_SOLIDIFY_NET_BACKPROP		//SANI1g1aTEMP54	//SANI1g6a
					#ifdef SANI_SOLIDIFY_NET_BACKPROP
						#define SANI_SOLIDIFY_NET_BACKPROP_AFTER_ACTIVATING_INDIVIDUAL_COMPONENTS	//SANI1g1aTEMP35	//SANI1g6a		
					#endif

					#define SANI_ENFORCE_WORD_CONNECTIVITY
					#ifdef SANI_ENFORCE_WORD_CONNECTIVITY
						#define SANI_ENFORCE_WORD_CONNECTIVITY_BETWEEN_PREVIOUS_ACTIVE_COMPONENTS_AND_NEWLY_ACTIVATED_COMPONENT	//SANI1g6aTEMP55	//make sure there is adjacent word connectivity between previous active components and newly activated component - ie no word indices are skipped
						#define SANI_ENFORCE_WORD_CONNECTIVITY_VERIFY_HYPOTHETICAL_PROPOGATION_FINDS_PREVIOUS_WORD	//SANI1g6bTEMP4
						#ifdef SANI_ENFORCE_WORD_CONNECTIVITY_VERIFY_HYPOTHETICAL_PROPOGATION_FINDS_PREVIOUS_WORD
							#define SANI_ENFORCE_WORD_CONNECTIVITY_VERIFY_HYPOTHETICAL_PROPOGATION_FINDS_PREVIOUS_WORD_NOUNS_ONLY
							#ifndef SANI_ENFORCE_WORD_CONNECTIVITY_VERIFY_HYPOTHETICAL_PROPOGATION_FINDS_PREVIOUS_WORD_NOUNS_ONLY
								#define SANI_ENFORCE_WORD_CONNECTIVITY_VERIFY_HYPOTHETICAL_PROPOGATION_FINDS_PREVIOUS_WORD_MULTIPLE_ACTIVATION_HYPOTHESES	//can perform pass through through multiple unactivated groups
							#endif
						#endif
						#define SANI_ENFORCE_WORD_CONNECTIVITY_BASIC	//SANI1g1x		
						#ifdef SANI_ENFORCE_WORD_CONNECTIVITY_BASIC
							//#define SANI_ENFORCE_WORD_CONNECTIVITY_BASIC_MAX_1_CONSECUTIVE_ISOLATED_WORDS	//SANI1g1x	//reactivated SANI1g6aTEMP58
							//#define SANI_ENFORCE_WORD_CONNECTIVITY_BASIC_CONSECUTIVE_WORDS_SAME_POSTYPE	//SANI1g6aTEMP58
						#endif
						#define SANI_ENFORCE_WORD_CONNECTIVITY_POSHOC	//SANI1g1b
					#endif 
				#endif

				//#define SANI_PREVENT_CIRCULAR_CONNECTION_LOOPS	//SANI1g1a	//temporarily enabled until determined due to parse these	//disabled SANI1g6a
				#ifdef SANI_SAVE_MEMORY_GROUPS
					#define SANI_SAVE_MEMORY_GROUPS_PREVENT_CIRCULAR_CONNECTION_LOOPS	//added SANI1g6a
				#endif

			#else
				#define SANI_LIGHT	//SANI1g10a
				//light: only ever maintain a single instance of the neural network in memory
				#ifdef SANI_LIGHT
					#define SANI_LIGHT_OPTIMISED		//SANI1g11a
					#ifdef SANI_LIGHT_OPTIMISED 

						#define SANI_REPLICATE_TOP_LEVEL_PARSE_TREE	//SANI1g11f - required for SANI_LIGHT_OPTIMISED
						#ifdef SANI_REPLICATE_TOP_LEVEL_PARSE_TREE
							#define SANI_DONT_SET_NEURON_TRACED	//SANI1g11o	//experimental
							#define SANI_FREE_MEMORY	//SANI1g11p
						#endif

						#define SANI_ADD_EXPLICIT_WORD_REFERENCES_AS_INDEPENDENT_POS_PERMUTATIONS	//SANI1g11m
						#ifdef SANI_ADD_EXPLICIT_WORD_REFERENCES_AS_INDEPENDENT_POS_PERMUTATIONS
							#define SANI_ADD_EXPLICIT_WORD_REFERENCES_AS_INDEPENDENT_POS_PERMUTATIONS_EFFICIENT
						#endif

						#define SANI_VERIFY_OWNER_GROUP_DOESNT_CONTAIN_NEWLY_ACTIVATED_COMPONENT_IN_ITS_PARSE_TREE	//SANI1g11e

						#define SANI_TAKE_LAST_SUCCESSFUL_PARSE_LIMIT_ITERATIONS_PREFERENCE_WEIGHT_BASE
						#ifdef SANI_TAKE_LAST_SUCCESSFUL_PARSE_LIMIT_ITERATIONS_PREFERENCE_WEIGHT_BASE
							#ifndef SANI_PARSE_SIMULTANEOUS_BIO_LIMIT_GENERATION_OF_SEM_NET_FROM_INCOMPLETE_PATHS
								#define SANI_TAKE_LAST_SUCCESSFUL_PARSE_LIMIT_ITERATIONS_PREFERENCE_WEIGHT	//SANI1g11cTEMP6
							#endif
							#ifdef SANI_TAKE_LAST_SUCCESSFUL_PARSE_LIMIT_ITERATIONS_PREFERENCE_WEIGHT
								#define SANI_TAKE_LAST_SUCCESSFUL_PARSE_LIMIT_ITERATIONS_PREFERENCE_WEIGHT_SUM
							#endif
							#define SANI_TAKE_LAST_SUCCESSFUL_PARSE_LIMIT_ITERATIONS_PREFERENCE_WEIGHT_DYNAMIC					//SANI1g11kTEMP3 //when existingActivationFoundStartComponent, and deciding whether to overwrite a component, if the prospectiveNewlyActivated component captures the exact same number of words as the existingActivatedComponent, select the path with the highest group weight
						#endif
						#ifdef SANI_PARSE_GENERATE_PARSE_TREE	
							#define SANI_SOLIDIFY_NET_BACKPROP		//SANI1g11j	//SANI1g1cTEMP4	//disabled SANI1g1cTEMP5
							#ifdef SANI_SOLIDIFY_NET_BACKPROP
								#define SANI_SOLIDIFY_NET_BACKPROP_AFTER_ACTIVATING_INDIVIDUAL_COMPONENTS	//SANI1g1cTEMP4	
								#define SANI_LIGHT_OPTIMISED_SOLIDIFY	//preprocessor tag for SANIrules.xml
							#endif
						#endif

						#define SANI_LIGHT_OPTIMISED_PREPROCESS	//SANI1g11aTEMP57
						#ifdef SANI_LIGHT_OPTIMISED_PREPROCESS
							#define SANI_LIGHT_OPTIMISED_PREPROCESS_RESET	//SANI1g11aTEMP57
							#define SANI_LIGHT_OPTIMISED_PREPROCESS_DONT_OVERWRITE_REFERENCESETS_THAT_CAPTURES_EOS	//3g11aTEMP63
							#ifdef SANI_LIGHT_OPTIMISED_PREPROCESS_DONT_OVERWRITE_REFERENCESETS_THAT_CAPTURES_EOS
								#define SANI_LIGHT_OPTIMISED_PREPROCESS_DONT_OVERWRITE_REFERENCESETS_THAT_CAPTURES_EOS_MOD	//SANI1g11i
								/*
								#ifdef SANI_LIGHT_OPTIMISED_PREPROCESS_DONT_OVERWRITE_REFERENCESETS_THAT_CAPTURES_EOS_MOD
									#define SANI_LIGHT_OPTIMISED_PREPROCESS_DONT_OVERWRITE_REFERENCESETS_THAT_CAPTURES_EOS_MOD2	//SANI1g11j
								#endif
								*/
							#endif
							//#define SANI_LIGHT_OPTIMISED_PREPROCESS_DONT_OVERWRITE_COMPONENT_WHEN_NEW_COMPONENT_AVAILABLE	//SANI1g11aTEMP79	//disabled SANI1g11aTEMP81
						#endif

						#define SANI_RESET_COMPONENT_NEURONCOMPONENTCONNECTIONACTIVEWORDRECORD	//SANI1g11aTEMP46

						#define SANI_REMOVE_LAST_OPTIONAL_COMPONENTS	//mandatory

						#define SANI_REVERSE_DIRECTION	//mandatory //required to support recursion (parse sentences from right to left); eg (Tom said that (Mary said))

						#define SANI_ENFORCE_WORD_CONNECTIVITY
						#ifdef SANI_ENFORCE_WORD_CONNECTIVITY
							#define SANI_ENFORCE_WORD_CONNECTIVITY_POSHOC	//CHECKTHIS
							#ifdef SANI_ENFORCE_WORD_CONNECTIVITY_POSHOC
								#define SANI_ENFORCE_WORD_CONNECTIVITY_POSHOC_STRICT	//CHECKTHIS
								#ifdef SANI_ENFORCE_WORD_CONNECTIVITY_POSHOC_STRICT
									#define SANI_ENFORCE_WORD_CONNECTIVITY_POSHOC_STRICT_MUTUALLY_EXCLUSIVE	//SANI1g11g
								#endif
							#endif
							#define SANI_ENFORCE_WORD_CONNECTIVITY_BETWEEN_PREVIOUS_ACTIVE_COMPONENTS_AND_NEWLY_ACTIVATED_COMPONENT	//CHECKTHIS
						#endif

						#define SANI_LIGHT_NEW	//new code specific to SANI_LIGHT encapsulated for reference only

						#define SANI_ALLOW_MULTIPLE_ACTIVATIONS	//mandatory
						#ifdef SANI_ALLOW_MULTIPLE_ACTIVATIONS
							#define SANI_LIGHT_OPTIMISED_ALLOW_MULTIPLE_ACTIVATIONS_TAKE_LAST_ACTIVATION_AS_PARSETREE	//mandatory (alternate method not implemented)
							#define SANI_LIGHT_OPTIMISED_ALLOW_MULTIPLE_ACTIVATIONS_VERIFY_MAX_NUMBER_OF_WORDS_IN_PARSETREE
							#define SANI_LIGHT_OPTIMISED_ALLOW_MULTIPLE_ACTIVATIONS_VERIFY_CONTAINS_EXISTING_WORDS_IN_PARSETREE	//SANI1g11aTEMP46
						#endif
						#define SANI_LIGHT_OPTIMISED_RESET_ONLY_ONCE_FOUND_FIRST_COMPONENT	//mandatory
						#ifdef SANI_LIGHT_OPTIMISED_RESET_ONLY_ONCE_FOUND_FIRST_COMPONENT
							#define SANI_LIGHT_OPTIMISED_RESET_ONLY_ONCE_FOUND_FIRST_COMPONENT_ENSURE_FIRST_COMPONENT_ACTIVE_NEW	//added SANI1g11aTEMP70, SANI1g11aTEMP74
							#define SANI_LIGHT_OPTIMISED_RESET_ONLY_ONCE_FOUND_FIRST_COMPONENT_RESTORE
							#define SANI_LIGHT_OPTIMISED_RESET_ONLY_ONCE_FOUND_FIRST_COMPONENT_RESET_ONCE_PER_WORD		//rely on existingActivationFoundStartComponent instead
							#ifdef SANI_LIGHT_OPTIMISED_RESET_ONLY_ONCE_FOUND_FIRST_COMPONENT_RESET_ONCE_PER_WORD
								#define SANI_LIGHT_OPTIMISED_RESET_ONLY_ONCE_FOUND_FIRST_COMPONENT_RESET_ONCE_PER_WORD_SUPPORT_RECURSION	//SANI1g11aTEMP37
								//#ifndef SANI_LIGHT_OPTIMISED_ALLOW_MULTIPLE_ACTIVATIONS_VERIFY_CONTAINS_EXISTING_WORDS_IN_PARSETREE
								#define SANI_LIGHT_OPTIMISED_RESET_ONLY_ONCE_FOUND_FIRST_COMPONENT_RESET_ONCE_PER_WORD_BASIC	//SANI1g11aTEMP44
								//#endif
							#endif
						#endif
					#else
						#define SANI_LIGHT_UNOPTIMISED	//SANI1g10a

						#define SANI_REMOVE_LAST_OPTIONAL_COMPONENTS	//mandatory

						#define SANI_REVERSE_DIRECTION	//required to support recursion (parse sentences from right to left); eg (Tom said that (Mary said))

						#define SANI_ENFORCE_WORD_CONNECTIVITY
						#ifdef SANI_ENFORCE_WORD_CONNECTIVITY
							#define SANI_ENFORCE_WORD_CONNECTIVITY_POSHOC
							#ifdef SANI_ENFORCE_WORD_CONNECTIVITY_POSHOC
								#define SANI_ENFORCE_WORD_CONNECTIVITY_POSHOC_STRICT
							#endif
							#define SANI_ENFORCE_WORD_CONNECTIVITY_BETWEEN_PREVIOUS_ACTIVE_COMPONENTS_AND_NEWLY_ACTIVATED_COMPONENT	//SANI1g6aTEMP55	//make sure there is adjacent word connectivity between previous active components and newly activated component - ie no word indices are skipped
						#endif

						//#define SANI_PREVENT_CIRCULAR_CONNECTION_LOOPS
						//#define SANI_SOLIDIFY_NET_BACKPROP	//TODO: work out if this requires reimplementation

						#define SANI_LIGHT_NEW	//new code specific to SANI_LIGHT encapsulated for reference only
						#ifdef SANI_LIGHT_NEW
							#define SANI_LIGHT_MEM
							#ifndef SANI_LIGHT_MEM
								//perform restore of neuron activations based on their associated word index rather than local memory
								#define SANI_LIGHT_BIO	//method without storing ownerGroupOrig in C++ memory
								//#define SANI_LIGHT_BIO2	//NOTYET CODED //determine method to restore using groupFrontComponentConnectionListIndex and numberOfWordsCurrentlyParsed
							#endif
						#endif
					#endif
				#endif
			#endif
		#endif

		#ifdef SANI_REMOVE_LAST_OPTIONAL_COMPONENTS
			#define SANI_REMOVE_LAST_OPTIONAL_COMPONENTS_ARTIFICIAL_GROUP_NAME_APPEND1 "ArtificialOptionalPermutationX1"
			#define SANI_REMOVE_LAST_OPTIONAL_COMPONENTS_ARTIFICIAL_GROUP_NAME_APPEND2 "ArtificialOptionalPermutationX2"
		#endif
			
	#else
		#define SANI_INVERSE	//SANI1f
	#endif
#endif


#endif
